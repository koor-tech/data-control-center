syntax = "proto3";

package api.services.cluster.v1;

import "api/resources/koor/v1/koor.proto";

option go_package = "github.com/koor-tech/data-control-center/gen/go/api/services/cluster";

message GetKoorClusterRequest {}

message GetKoorClusterResponse {
  api.resources.koor.v1.KoorCluster koor_cluster = 1;
}

message GetTroubleshootReportRequest {}

message GetTroubleshootReportResponse {
  string report = 1;
}

message StartNetworkTestRequest {}

message StartNetworkTestResponse {
  bool already_running = 1;
}

message CancelNetworkTestRequest {}

message CancelNetworkTestResponse {
  bool not_running = 1;
}

message GetNetworkTestResultsRequest {}

message GetNetworkTestResultsResponse {
  string file_name = 1;
  bytes file_contents = 2;
}

message SetScrubbingScheduleRequest {
  api.resources.koor.v1.OSDScrubbingSchedule osd_scrubbing_schedule = 1;
}

message SetScrubbingScheduleResponse {
  api.resources.koor.v1.OSDScrubbingSchedule osd_scrubbing_schedule = 1;
}

service ClusterService {
  rpc GetKoorCluster(GetKoorClusterRequest) returns (GetKoorClusterResponse) {}
  rpc GetTroubleshootReport(GetTroubleshootReportRequest) returns (GetTroubleshootReportResponse) {}

  rpc StartNetworkTest(StartNetworkTestRequest) returns (StartNetworkTestResponse) {}
  rpc CancelNetworkTest(CancelNetworkTestRequest) returns (CancelNetworkTestResponse) {}
  rpc GetNetworkTestResults(GetNetworkTestResultsRequest) returns (GetNetworkTestResultsResponse) {}

  rpc SetScrubbingSchedule(SetScrubbingScheduleRequest) returns (SetScrubbingScheduleResponse) {}
}
