// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/services/k8sresources/v1/editor.proto

package k8sresourcesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SResourcesService_GetResources_FullMethodName = "/api.services.k8sresources.v1.K8sResourcesService/GetResources"
	K8SResourcesService_SaveResource_FullMethodName = "/api.services.k8sresources.v1.K8sResourcesService/SaveResource"
)

// K8SResourcesServiceClient is the client API for K8SResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SResourcesServiceClient interface {
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	SaveResource(ctx context.Context, in *SaveResourceRequest, opts ...grpc.CallOption) (*SaveResourceResponse, error)
}

type k8SResourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SResourcesServiceClient(cc grpc.ClientConnInterface) K8SResourcesServiceClient {
	return &k8SResourcesServiceClient{cc}
}

func (c *k8SResourcesServiceClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, K8SResourcesService_GetResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SResourcesServiceClient) SaveResource(ctx context.Context, in *SaveResourceRequest, opts ...grpc.CallOption) (*SaveResourceResponse, error) {
	out := new(SaveResourceResponse)
	err := c.cc.Invoke(ctx, K8SResourcesService_SaveResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SResourcesServiceServer is the server API for K8SResourcesService service.
// All implementations should embed UnimplementedK8SResourcesServiceServer
// for forward compatibility
type K8SResourcesServiceServer interface {
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
	SaveResource(context.Context, *SaveResourceRequest) (*SaveResourceResponse, error)
}

// UnimplementedK8SResourcesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedK8SResourcesServiceServer struct {
}

func (UnimplementedK8SResourcesServiceServer) GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedK8SResourcesServiceServer) SaveResource(context.Context, *SaveResourceRequest) (*SaveResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveResource not implemented")
}

// UnsafeK8SResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SResourcesServiceServer will
// result in compilation errors.
type UnsafeK8SResourcesServiceServer interface {
	mustEmbedUnimplementedK8SResourcesServiceServer()
}

func RegisterK8SResourcesServiceServer(s grpc.ServiceRegistrar, srv K8SResourcesServiceServer) {
	s.RegisterService(&K8SResourcesService_ServiceDesc, srv)
}

func _K8SResourcesService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SResourcesServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SResourcesService_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SResourcesServiceServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SResourcesService_SaveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SResourcesServiceServer).SaveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SResourcesService_SaveResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SResourcesServiceServer).SaveResource(ctx, req.(*SaveResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SResourcesService_ServiceDesc is the grpc.ServiceDesc for K8SResourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SResourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.services.k8sresources.v1.K8sResourcesService",
	HandlerType: (*K8SResourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResources",
			Handler:    _K8SResourcesService_GetResources_Handler,
		},
		{
			MethodName: "SaveResource",
			Handler:    _K8SResourcesService_SaveResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/k8sresources/v1/editor.proto",
}
