// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/services/stats/stats.proto

package stats

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MonService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonServiceMultiError, or
// nil if none found.
func (m *MonService) ValidateAll() error {
	return m.validate(true)
}

func (m *MonService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DaemonCount

	// no validation rules for Quorum

	// no validation rules for Age

	if len(errors) > 0 {
		return MonServiceMultiError(errors)
	}

	return nil
}

// MonServiceMultiError is an error wrapping multiple validation errors
// returned by MonService.ValidateAll() if the designated constraints aren't met.
type MonServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonServiceMultiError) AllErrors() []error { return m }

// MonServiceValidationError is the validation error returned by
// MonService.Validate if the designated constraints aren't met.
type MonServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonServiceValidationError) ErrorName() string { return "MonServiceValidationError" }

// Error satisfies the builtin error interface
func (e MonServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonServiceValidationError{}

// Validate checks the field values on MgrService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MgrService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MgrService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MgrServiceMultiError, or
// nil if none found.
func (m *MgrService) ValidateAll() error {
	return m.validate(true)
}

func (m *MgrService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Active

	// no validation rules for Since

	if len(errors) > 0 {
		return MgrServiceMultiError(errors)
	}

	return nil
}

// MgrServiceMultiError is an error wrapping multiple validation errors
// returned by MgrService.ValidateAll() if the designated constraints aren't met.
type MgrServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MgrServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MgrServiceMultiError) AllErrors() []error { return m }

// MgrServiceValidationError is the validation error returned by
// MgrService.Validate if the designated constraints aren't met.
type MgrServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MgrServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MgrServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MgrServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MgrServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MgrServiceValidationError) ErrorName() string { return "MgrServiceValidationError" }

// Error satisfies the builtin error interface
func (e MgrServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMgrService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MgrServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MgrServiceValidationError{}

// Validate checks the field values on MdsService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MdsService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MdsService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MdsServiceMultiError, or
// nil if none found.
func (m *MdsService) ValidateAll() error {
	return m.validate(true)
}

func (m *MdsService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DaemonsUp

	// no validation rules for HotStandbyCount

	if len(errors) > 0 {
		return MdsServiceMultiError(errors)
	}

	return nil
}

// MdsServiceMultiError is an error wrapping multiple validation errors
// returned by MdsService.ValidateAll() if the designated constraints aren't met.
type MdsServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MdsServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MdsServiceMultiError) AllErrors() []error { return m }

// MdsServiceValidationError is the validation error returned by
// MdsService.Validate if the designated constraints aren't met.
type MdsServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MdsServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MdsServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MdsServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MdsServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MdsServiceValidationError) ErrorName() string { return "MdsServiceValidationError" }

// Error satisfies the builtin error interface
func (e MdsServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMdsService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MdsServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MdsServiceValidationError{}

// Validate checks the field values on OsdService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OsdService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OsdService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OsdServiceMultiError, or
// nil if none found.
func (m *OsdService) ValidateAll() error {
	return m.validate(true)
}

func (m *OsdService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OsdCount

	// no validation rules for OsdUp

	// no validation rules for OsdIn

	// no validation rules for Since

	if len(errors) > 0 {
		return OsdServiceMultiError(errors)
	}

	return nil
}

// OsdServiceMultiError is an error wrapping multiple validation errors
// returned by OsdService.ValidateAll() if the designated constraints aren't met.
type OsdServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OsdServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OsdServiceMultiError) AllErrors() []error { return m }

// OsdServiceValidationError is the validation error returned by
// OsdService.Validate if the designated constraints aren't met.
type OsdServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OsdServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OsdServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OsdServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OsdServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OsdServiceValidationError) ErrorName() string { return "OsdServiceValidationError" }

// Error satisfies the builtin error interface
func (e OsdServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOsdService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OsdServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OsdServiceValidationError{}

// Validate checks the field values on RgwService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RgwService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RgwService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RgwServiceMultiError, or
// nil if none found.
func (m *RgwService) ValidateAll() error {
	return m.validate(true)
}

func (m *RgwService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActiveDaemon

	// no validation rules for HostCount

	// no validation rules for ZoneCount

	if len(errors) > 0 {
		return RgwServiceMultiError(errors)
	}

	return nil
}

// RgwServiceMultiError is an error wrapping multiple validation errors
// returned by RgwService.ValidateAll() if the designated constraints aren't met.
type RgwServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RgwServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RgwServiceMultiError) AllErrors() []error { return m }

// RgwServiceValidationError is the validation error returned by
// RgwService.Validate if the designated constraints aren't met.
type RgwServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RgwServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RgwServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RgwServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RgwServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RgwServiceValidationError) ErrorName() string { return "RgwServiceValidationError" }

// Error satisfies the builtin error interface
func (e RgwServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRgwService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RgwServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RgwServiceValidationError{}

// Validate checks the field values on Services with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Services) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Services with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicesMultiError, or nil
// if none found.
func (m *Services) ValidateAll() error {
	return m.validate(true)
}

func (m *Services) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Mon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMgr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mgr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mgr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMgr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Mgr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Mds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOsd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Osd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Osd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Osd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRgw()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Rgw",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Rgw",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRgw()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Rgw",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServicesMultiError(errors)
	}

	return nil
}

// ServicesMultiError is an error wrapping multiple validation errors returned
// by Services.ValidateAll() if the designated constraints aren't met.
type ServicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesMultiError) AllErrors() []error { return m }

// ServicesValidationError is the validation error returned by
// Services.Validate if the designated constraints aren't met.
type ServicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesValidationError) ErrorName() string { return "ServicesValidationError" }

// Error satisfies the builtin error interface
func (e ServicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesValidationError{}

// Validate checks the field values on ClusterStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterStatusResponseMultiError, or nil if none found.
func (m *ClusterStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetServices()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterStatusResponseValidationError{
					field:  "Services",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterStatusResponseValidationError{
					field:  "Services",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServices()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterStatusResponseValidationError{
				field:  "Services",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterStatusResponseMultiError(errors)
	}

	return nil
}

// ClusterStatusResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterStatusResponseMultiError) AllErrors() []error { return m }

// ClusterStatusResponseValidationError is the validation error returned by
// ClusterStatusResponse.Validate if the designated constraints aren't met.
type ClusterStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterStatusResponseValidationError) ErrorName() string {
	return "ClusterStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterStatusResponseValidationError{}
