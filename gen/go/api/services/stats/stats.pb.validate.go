// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/services/stats/stats.proto

package stats

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetClusterStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterStatsRequestMultiError, or nil if none found.
func (m *GetClusterStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClusterStatsRequestMultiError(errors)
	}

	return nil
}

// GetClusterStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetClusterStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterStatsRequestMultiError) AllErrors() []error { return m }

// GetClusterStatsRequestValidationError is the validation error returned by
// GetClusterStatsRequest.Validate if the designated constraints aren't met.
type GetClusterStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterStatsRequestValidationError) ErrorName() string {
	return "GetClusterStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterStatsRequestValidationError{}

// Validate checks the field values on GetClusterStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterStatsResponseMultiError, or nil if none found.
func (m *GetClusterStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterStatsResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterStatsResponseMultiError(errors)
	}

	return nil
}

// GetClusterStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetClusterStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterStatsResponseMultiError) AllErrors() []error { return m }

// GetClusterStatsResponseValidationError is the validation error returned by
// GetClusterStatsResponse.Validate if the designated constraints aren't met.
type GetClusterStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterStatsResponseValidationError) ErrorName() string {
	return "GetClusterStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterStatsResponseValidationError{}

// Validate checks the field values on GetClusterResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterResourcesRequestMultiError, or nil if none found.
func (m *GetClusterResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClusterResourcesRequestMultiError(errors)
	}

	return nil
}

// GetClusterResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by GetClusterResourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetClusterResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterResourcesRequestMultiError) AllErrors() []error { return m }

// GetClusterResourcesRequestValidationError is the validation error returned
// by GetClusterResourcesRequest.Validate if the designated constraints aren't met.
type GetClusterResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterResourcesRequestValidationError) ErrorName() string {
	return "GetClusterResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterResourcesRequestValidationError{}

// Validate checks the field values on GetClusterResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterResourcesResponseMultiError, or nil if none found.
func (m *GetClusterResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClusterResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClusterResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClusterResourcesResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClusterResourcesResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterResourcesResponseValidationError{
					field:  fmt.Sprintf("Deployments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClusterResourcesResponseMultiError(errors)
	}

	return nil
}

// GetClusterResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by GetClusterResourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetClusterResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterResourcesResponseMultiError) AllErrors() []error { return m }

// GetClusterResourcesResponseValidationError is the validation error returned
// by GetClusterResourcesResponse.Validate if the designated constraints
// aren't met.
type GetClusterResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterResourcesResponseValidationError) ErrorName() string {
	return "GetClusterResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterResourcesResponseValidationError{}

// Validate checks the field values on GetClusterNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterNodesRequestMultiError, or nil if none found.
func (m *GetClusterNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClusterNodesRequestMultiError(errors)
	}

	return nil
}

// GetClusterNodesRequestMultiError is an error wrapping multiple validation
// errors returned by GetClusterNodesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterNodesRequestMultiError) AllErrors() []error { return m }

// GetClusterNodesRequestValidationError is the validation error returned by
// GetClusterNodesRequest.Validate if the designated constraints aren't met.
type GetClusterNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterNodesRequestValidationError) ErrorName() string {
	return "GetClusterNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterNodesRequestValidationError{}

// Validate checks the field values on GetClusterNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterNodesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterNodesResponseMultiError, or nil if none found.
func (m *GetClusterNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClusterNodesResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClusterNodesResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterNodesResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClusterNodesResponseMultiError(errors)
	}

	return nil
}

// GetClusterNodesResponseMultiError is an error wrapping multiple validation
// errors returned by GetClusterNodesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterNodesResponseMultiError) AllErrors() []error { return m }

// GetClusterNodesResponseValidationError is the validation error returned by
// GetClusterNodesResponse.Validate if the designated constraints aren't met.
type GetClusterNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterNodesResponseValidationError) ErrorName() string {
	return "GetClusterNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterNodesResponseValidationError{}

// Validate checks the field values on GetClusterRadarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterRadarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterRadarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterRadarRequestMultiError, or nil if none found.
func (m *GetClusterRadarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterRadarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClusterRadarRequestMultiError(errors)
	}

	return nil
}

// GetClusterRadarRequestMultiError is an error wrapping multiple validation
// errors returned by GetClusterRadarRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterRadarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterRadarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterRadarRequestMultiError) AllErrors() []error { return m }

// GetClusterRadarRequestValidationError is the validation error returned by
// GetClusterRadarRequest.Validate if the designated constraints aren't met.
type GetClusterRadarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRadarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRadarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRadarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRadarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRadarRequestValidationError) ErrorName() string {
	return "GetClusterRadarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterRadarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterRadarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRadarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRadarRequestValidationError{}

// Validate checks the field values on GetClusterRadarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterRadarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterRadarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterRadarResponseMultiError, or nil if none found.
func (m *GetClusterRadarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterRadarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRadar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterRadarResponseValidationError{
					field:  "Radar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterRadarResponseValidationError{
					field:  "Radar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRadar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterRadarResponseValidationError{
				field:  "Radar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterRadarResponseMultiError(errors)
	}

	return nil
}

// GetClusterRadarResponseMultiError is an error wrapping multiple validation
// errors returned by GetClusterRadarResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterRadarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterRadarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterRadarResponseMultiError) AllErrors() []error { return m }

// GetClusterRadarResponseValidationError is the validation error returned by
// GetClusterRadarResponse.Validate if the designated constraints aren't met.
type GetClusterRadarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRadarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRadarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRadarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRadarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRadarResponseValidationError) ErrorName() string {
	return "GetClusterRadarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterRadarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterRadarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRadarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRadarResponseValidationError{}
