// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/services/stats/stats.proto

package statsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	stats "github.com/koor-tech/data-control-center/gen/go/api/services/stats"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// StatsName is the fully-qualified name of the Stats service.
	StatsName = "services.cluster.Stats"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StatsStreamProcedure is the fully-qualified name of the Stats's Stream RPC.
	StatsStreamProcedure = "/services.cluster.Stats/Stream"
)

// StatsClient is a client for the services.cluster.Stats service.
type StatsClient interface {
	Stream(context.Context, *connect.Request[stats.StreamRequest]) (*connect.ServerStreamForClient[stats.StreamResponse], error)
}

// NewStatsClient constructs a client for the services.cluster.Stats service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStatsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StatsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &statsClient{
		stream: connect.NewClient[stats.StreamRequest, stats.StreamResponse](
			httpClient,
			baseURL+StatsStreamProcedure,
			opts...,
		),
	}
}

// statsClient implements StatsClient.
type statsClient struct {
	stream *connect.Client[stats.StreamRequest, stats.StreamResponse]
}

// Stream calls services.cluster.Stats.Stream.
func (c *statsClient) Stream(ctx context.Context, req *connect.Request[stats.StreamRequest]) (*connect.ServerStreamForClient[stats.StreamResponse], error) {
	return c.stream.CallServerStream(ctx, req)
}

// StatsHandler is an implementation of the services.cluster.Stats service.
type StatsHandler interface {
	Stream(context.Context, *connect.Request[stats.StreamRequest], *connect.ServerStream[stats.StreamResponse]) error
}

// NewStatsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStatsHandler(svc StatsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	statsStreamHandler := connect.NewServerStreamHandler(
		StatsStreamProcedure,
		svc.Stream,
		opts...,
	)
	return "/services.cluster.Stats/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StatsStreamProcedure:
			statsStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStatsHandler returns CodeUnimplemented from all methods.
type UnimplementedStatsHandler struct{}

func (UnimplementedStatsHandler) Stream(context.Context, *connect.Request[stats.StreamRequest], *connect.ServerStream[stats.StreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("services.cluster.Stats.Stream is not implemented"))
}
