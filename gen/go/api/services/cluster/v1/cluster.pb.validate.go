// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/services/cluster/v1/cluster.proto

package clusterv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetKoorClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKoorClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKoorClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKoorClusterRequestMultiError, or nil if none found.
func (m *GetKoorClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKoorClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetKoorClusterRequestMultiError(errors)
	}

	return nil
}

// GetKoorClusterRequestMultiError is an error wrapping multiple validation
// errors returned by GetKoorClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type GetKoorClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKoorClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKoorClusterRequestMultiError) AllErrors() []error { return m }

// GetKoorClusterRequestValidationError is the validation error returned by
// GetKoorClusterRequest.Validate if the designated constraints aren't met.
type GetKoorClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKoorClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKoorClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKoorClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKoorClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKoorClusterRequestValidationError) ErrorName() string {
	return "GetKoorClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKoorClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKoorClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKoorClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKoorClusterRequestValidationError{}

// Validate checks the field values on GetKoorClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKoorClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKoorClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKoorClusterResponseMultiError, or nil if none found.
func (m *GetKoorClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKoorClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKoorCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKoorClusterResponseValidationError{
					field:  "KoorCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKoorClusterResponseValidationError{
					field:  "KoorCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKoorCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKoorClusterResponseValidationError{
				field:  "KoorCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKoorClusterResponseMultiError(errors)
	}

	return nil
}

// GetKoorClusterResponseMultiError is an error wrapping multiple validation
// errors returned by GetKoorClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type GetKoorClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKoorClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKoorClusterResponseMultiError) AllErrors() []error { return m }

// GetKoorClusterResponseValidationError is the validation error returned by
// GetKoorClusterResponse.Validate if the designated constraints aren't met.
type GetKoorClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKoorClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKoorClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKoorClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKoorClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKoorClusterResponseValidationError) ErrorName() string {
	return "GetKoorClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKoorClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKoorClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKoorClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKoorClusterResponseValidationError{}

// Validate checks the field values on GetTroubleshootReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTroubleshootReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTroubleshootReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTroubleshootReportRequestMultiError, or nil if none found.
func (m *GetTroubleshootReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTroubleshootReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTroubleshootReportRequestMultiError(errors)
	}

	return nil
}

// GetTroubleshootReportRequestMultiError is an error wrapping multiple
// validation errors returned by GetTroubleshootReportRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTroubleshootReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTroubleshootReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTroubleshootReportRequestMultiError) AllErrors() []error { return m }

// GetTroubleshootReportRequestValidationError is the validation error returned
// by GetTroubleshootReportRequest.Validate if the designated constraints
// aren't met.
type GetTroubleshootReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTroubleshootReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTroubleshootReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTroubleshootReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTroubleshootReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTroubleshootReportRequestValidationError) ErrorName() string {
	return "GetTroubleshootReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTroubleshootReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTroubleshootReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTroubleshootReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTroubleshootReportRequestValidationError{}

// Validate checks the field values on GetTroubleshootReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTroubleshootReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTroubleshootReportResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTroubleshootReportResponseMultiError, or nil if none found.
func (m *GetTroubleshootReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTroubleshootReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Report

	if len(errors) > 0 {
		return GetTroubleshootReportResponseMultiError(errors)
	}

	return nil
}

// GetTroubleshootReportResponseMultiError is an error wrapping multiple
// validation errors returned by GetTroubleshootReportResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTroubleshootReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTroubleshootReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTroubleshootReportResponseMultiError) AllErrors() []error { return m }

// GetTroubleshootReportResponseValidationError is the validation error
// returned by GetTroubleshootReportResponse.Validate if the designated
// constraints aren't met.
type GetTroubleshootReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTroubleshootReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTroubleshootReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTroubleshootReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTroubleshootReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTroubleshootReportResponseValidationError) ErrorName() string {
	return "GetTroubleshootReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTroubleshootReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTroubleshootReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTroubleshootReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTroubleshootReportResponseValidationError{}

// Validate checks the field values on GetNetworkTestStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkTestStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkTestStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNetworkTestStatusRequestMultiError, or nil if none found.
func (m *GetNetworkTestStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkTestStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNetworkTestStatusRequestMultiError(errors)
	}

	return nil
}

// GetNetworkTestStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetNetworkTestStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNetworkTestStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkTestStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkTestStatusRequestMultiError) AllErrors() []error { return m }

// GetNetworkTestStatusRequestValidationError is the validation error returned
// by GetNetworkTestStatusRequest.Validate if the designated constraints
// aren't met.
type GetNetworkTestStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkTestStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkTestStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkTestStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkTestStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkTestStatusRequestValidationError) ErrorName() string {
	return "GetNetworkTestStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkTestStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkTestStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkTestStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkTestStatusRequestValidationError{}

// Validate checks the field values on GetNetworkTestStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkTestStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkTestStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNetworkTestStatusResponseMultiError, or nil if none found.
func (m *GetNetworkTestStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkTestStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Running

	// no validation rules for Logs

	if len(errors) > 0 {
		return GetNetworkTestStatusResponseMultiError(errors)
	}

	return nil
}

// GetNetworkTestStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetNetworkTestStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNetworkTestStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkTestStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkTestStatusResponseMultiError) AllErrors() []error { return m }

// GetNetworkTestStatusResponseValidationError is the validation error returned
// by GetNetworkTestStatusResponse.Validate if the designated constraints
// aren't met.
type GetNetworkTestStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkTestStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkTestStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkTestStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkTestStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkTestStatusResponseValidationError) ErrorName() string {
	return "GetNetworkTestStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkTestStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkTestStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkTestStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkTestStatusResponseValidationError{}

// Validate checks the field values on StartNetworkTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartNetworkTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartNetworkTestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartNetworkTestRequestMultiError, or nil if none found.
func (m *StartNetworkTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartNetworkTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostNetwork

	if _, ok := NetworkTestOutputFormat_name[int32(m.GetOutputFormat())]; !ok {
		err := StartNetworkTestRequestValidationError{
			field:  "OutputFormat",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartNetworkTestRequestMultiError(errors)
	}

	return nil
}

// StartNetworkTestRequestMultiError is an error wrapping multiple validation
// errors returned by StartNetworkTestRequest.ValidateAll() if the designated
// constraints aren't met.
type StartNetworkTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartNetworkTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartNetworkTestRequestMultiError) AllErrors() []error { return m }

// StartNetworkTestRequestValidationError is the validation error returned by
// StartNetworkTestRequest.Validate if the designated constraints aren't met.
type StartNetworkTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartNetworkTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartNetworkTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartNetworkTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartNetworkTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartNetworkTestRequestValidationError) ErrorName() string {
	return "StartNetworkTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartNetworkTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartNetworkTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartNetworkTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartNetworkTestRequestValidationError{}

// Validate checks the field values on StartNetworkTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartNetworkTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartNetworkTestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartNetworkTestResponseMultiError, or nil if none found.
func (m *StartNetworkTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartNetworkTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AlreadyRunning

	if len(errors) > 0 {
		return StartNetworkTestResponseMultiError(errors)
	}

	return nil
}

// StartNetworkTestResponseMultiError is an error wrapping multiple validation
// errors returned by StartNetworkTestResponse.ValidateAll() if the designated
// constraints aren't met.
type StartNetworkTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartNetworkTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartNetworkTestResponseMultiError) AllErrors() []error { return m }

// StartNetworkTestResponseValidationError is the validation error returned by
// StartNetworkTestResponse.Validate if the designated constraints aren't met.
type StartNetworkTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartNetworkTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartNetworkTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartNetworkTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartNetworkTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartNetworkTestResponseValidationError) ErrorName() string {
	return "StartNetworkTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartNetworkTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartNetworkTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartNetworkTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartNetworkTestResponseValidationError{}

// Validate checks the field values on CancelNetworkTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelNetworkTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelNetworkTestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelNetworkTestRequestMultiError, or nil if none found.
func (m *CancelNetworkTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelNetworkTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelNetworkTestRequestMultiError(errors)
	}

	return nil
}

// CancelNetworkTestRequestMultiError is an error wrapping multiple validation
// errors returned by CancelNetworkTestRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelNetworkTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelNetworkTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelNetworkTestRequestMultiError) AllErrors() []error { return m }

// CancelNetworkTestRequestValidationError is the validation error returned by
// CancelNetworkTestRequest.Validate if the designated constraints aren't met.
type CancelNetworkTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelNetworkTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelNetworkTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelNetworkTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelNetworkTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelNetworkTestRequestValidationError) ErrorName() string {
	return "CancelNetworkTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelNetworkTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelNetworkTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelNetworkTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelNetworkTestRequestValidationError{}

// Validate checks the field values on CancelNetworkTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelNetworkTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelNetworkTestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelNetworkTestResponseMultiError, or nil if none found.
func (m *CancelNetworkTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelNetworkTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotRunning

	if len(errors) > 0 {
		return CancelNetworkTestResponseMultiError(errors)
	}

	return nil
}

// CancelNetworkTestResponseMultiError is an error wrapping multiple validation
// errors returned by CancelNetworkTestResponse.ValidateAll() if the
// designated constraints aren't met.
type CancelNetworkTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelNetworkTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelNetworkTestResponseMultiError) AllErrors() []error { return m }

// CancelNetworkTestResponseValidationError is the validation error returned by
// CancelNetworkTestResponse.Validate if the designated constraints aren't met.
type CancelNetworkTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelNetworkTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelNetworkTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelNetworkTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelNetworkTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelNetworkTestResponseValidationError) ErrorName() string {
	return "CancelNetworkTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelNetworkTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelNetworkTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelNetworkTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelNetworkTestResponseValidationError{}

// Validate checks the field values on GetNetworkTestResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkTestResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkTestResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNetworkTestResultsRequestMultiError, or nil if none found.
func (m *GetNetworkTestResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkTestResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNetworkTestResultsRequestMultiError(errors)
	}

	return nil
}

// GetNetworkTestResultsRequestMultiError is an error wrapping multiple
// validation errors returned by GetNetworkTestResultsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNetworkTestResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkTestResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkTestResultsRequestMultiError) AllErrors() []error { return m }

// GetNetworkTestResultsRequestValidationError is the validation error returned
// by GetNetworkTestResultsRequest.Validate if the designated constraints
// aren't met.
type GetNetworkTestResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkTestResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkTestResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkTestResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkTestResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkTestResultsRequestValidationError) ErrorName() string {
	return "GetNetworkTestResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkTestResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkTestResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkTestResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkTestResultsRequestValidationError{}

// Validate checks the field values on GetNetworkTestResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNetworkTestResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNetworkTestResultsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNetworkTestResultsResponseMultiError, or nil if none found.
func (m *GetNetworkTestResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNetworkTestResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for FileType

	// no validation rules for FileContents

	if len(errors) > 0 {
		return GetNetworkTestResultsResponseMultiError(errors)
	}

	return nil
}

// GetNetworkTestResultsResponseMultiError is an error wrapping multiple
// validation errors returned by GetNetworkTestResultsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetNetworkTestResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNetworkTestResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNetworkTestResultsResponseMultiError) AllErrors() []error { return m }

// GetNetworkTestResultsResponseValidationError is the validation error
// returned by GetNetworkTestResultsResponse.Validate if the designated
// constraints aren't met.
type GetNetworkTestResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNetworkTestResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNetworkTestResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNetworkTestResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNetworkTestResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNetworkTestResultsResponseValidationError) ErrorName() string {
	return "GetNetworkTestResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNetworkTestResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNetworkTestResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNetworkTestResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNetworkTestResultsResponseValidationError{}

// Validate checks the field values on SetScrubbingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetScrubbingScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetScrubbingScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetScrubbingScheduleRequestMultiError, or nil if none found.
func (m *SetScrubbingScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetScrubbingScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOsdScrubbingSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetScrubbingScheduleRequestValidationError{
					field:  "OsdScrubbingSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetScrubbingScheduleRequestValidationError{
					field:  "OsdScrubbingSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsdScrubbingSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetScrubbingScheduleRequestValidationError{
				field:  "OsdScrubbingSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetScrubbingScheduleRequestMultiError(errors)
	}

	return nil
}

// SetScrubbingScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by SetScrubbingScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type SetScrubbingScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetScrubbingScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetScrubbingScheduleRequestMultiError) AllErrors() []error { return m }

// SetScrubbingScheduleRequestValidationError is the validation error returned
// by SetScrubbingScheduleRequest.Validate if the designated constraints
// aren't met.
type SetScrubbingScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetScrubbingScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetScrubbingScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetScrubbingScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetScrubbingScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetScrubbingScheduleRequestValidationError) ErrorName() string {
	return "SetScrubbingScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetScrubbingScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetScrubbingScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetScrubbingScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetScrubbingScheduleRequestValidationError{}

// Validate checks the field values on SetScrubbingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetScrubbingScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetScrubbingScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetScrubbingScheduleResponseMultiError, or nil if none found.
func (m *SetScrubbingScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetScrubbingScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOsdScrubbingSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetScrubbingScheduleResponseValidationError{
					field:  "OsdScrubbingSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetScrubbingScheduleResponseValidationError{
					field:  "OsdScrubbingSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsdScrubbingSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetScrubbingScheduleResponseValidationError{
				field:  "OsdScrubbingSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetScrubbingScheduleResponseMultiError(errors)
	}

	return nil
}

// SetScrubbingScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by SetScrubbingScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type SetScrubbingScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetScrubbingScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetScrubbingScheduleResponseMultiError) AllErrors() []error { return m }

// SetScrubbingScheduleResponseValidationError is the validation error returned
// by SetScrubbingScheduleResponse.Validate if the designated constraints
// aren't met.
type SetScrubbingScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetScrubbingScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetScrubbingScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetScrubbingScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetScrubbingScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetScrubbingScheduleResponseValidationError) ErrorName() string {
	return "SetScrubbingScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetScrubbingScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetScrubbingScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetScrubbingScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetScrubbingScheduleResponseValidationError{}

// Validate checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesResponseMultiError, or nil if none found.
func (m *GetResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResourcesResponseValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResourcesResponseValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResourcesResponseValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResourcesResponseMultiError(errors)
	}

	return nil
}

// GetResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by GetResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesResponseMultiError) AllErrors() []error { return m }

// GetResourcesResponseValidationError is the validation error returned by
// GetResourcesResponse.Validate if the designated constraints aren't met.
type GetResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesResponseValidationError) ErrorName() string {
	return "GetResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesResponseValidationError{}

// Validate checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesRequestMultiError, or nil if none found.
func (m *GetResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetResourcesRequestMultiError(errors)
	}

	return nil
}

// GetResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesRequestMultiError) AllErrors() []error { return m }

// GetResourcesRequestValidationError is the validation error returned by
// GetResourcesRequest.Validate if the designated constraints aren't met.
type GetResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesRequestValidationError) ErrorName() string {
	return "GetResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesRequestValidationError{}

// Validate checks the field values on SaveResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveResourcesRequestMultiError, or nil if none found.
func (m *SaveResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveResourcesRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveResourcesRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveResourcesRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveResourcesRequestMultiError(errors)
	}

	return nil
}

// SaveResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by SaveResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveResourcesRequestMultiError) AllErrors() []error { return m }

// SaveResourcesRequestValidationError is the validation error returned by
// SaveResourcesRequest.Validate if the designated constraints aren't met.
type SaveResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveResourcesRequestValidationError) ErrorName() string {
	return "SaveResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveResourcesRequestValidationError{}

// Validate checks the field values on SaveResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveResourcesResponseMultiError, or nil if none found.
func (m *SaveResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveResourcesResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveResourcesResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveResourcesResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveResourcesResponseMultiError(errors)
	}

	return nil
}

// SaveResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by SaveResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveResourcesResponseMultiError) AllErrors() []error { return m }

// SaveResourcesResponseValidationError is the validation error returned by
// SaveResourcesResponse.Validate if the designated constraints aren't met.
type SaveResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveResourcesResponseValidationError) ErrorName() string {
	return "SaveResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveResourcesResponseValidationError{}
