// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/services/cluster/v1/cluster.proto

package clusterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/koor-tech/data-control-center/gen/go/api/services/cluster/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "api.services.cluster.v1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceGetKoorClusterProcedure is the fully-qualified name of the ClusterService's
	// GetKoorCluster RPC.
	ClusterServiceGetKoorClusterProcedure = "/api.services.cluster.v1.ClusterService/GetKoorCluster"
	// ClusterServiceGetTroubleshootReportProcedure is the fully-qualified name of the ClusterService's
	// GetTroubleshootReport RPC.
	ClusterServiceGetTroubleshootReportProcedure = "/api.services.cluster.v1.ClusterService/GetTroubleshootReport"
	// ClusterServiceSetScrubbingScheduleProcedure is the fully-qualified name of the ClusterService's
	// SetScrubbingSchedule RPC.
	ClusterServiceSetScrubbingScheduleProcedure = "/api.services.cluster.v1.ClusterService/SetScrubbingSchedule"
)

// ClusterServiceClient is a client for the api.services.cluster.v1.ClusterService service.
type ClusterServiceClient interface {
	GetKoorCluster(context.Context, *connect.Request[v1.GetKoorClusterRequest]) (*connect.Response[v1.GetKoorClusterResponse], error)
	GetTroubleshootReport(context.Context, *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error)
	SetScrubbingSchedule(context.Context, *connect.Request[v1.SetScrubbingScheduleRequest]) (*connect.Response[v1.SetScrubbingScheduleResponse], error)
}

// NewClusterServiceClient constructs a client for the api.services.cluster.v1.ClusterService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterServiceClient{
		getKoorCluster: connect.NewClient[v1.GetKoorClusterRequest, v1.GetKoorClusterResponse](
			httpClient,
			baseURL+ClusterServiceGetKoorClusterProcedure,
			opts...,
		),
		getTroubleshootReport: connect.NewClient[v1.GetTroubleshootReportRequest, v1.GetTroubleshootReportResponse](
			httpClient,
			baseURL+ClusterServiceGetTroubleshootReportProcedure,
			opts...,
		),
		setScrubbingSchedule: connect.NewClient[v1.SetScrubbingScheduleRequest, v1.SetScrubbingScheduleResponse](
			httpClient,
			baseURL+ClusterServiceSetScrubbingScheduleProcedure,
			opts...,
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	getKoorCluster        *connect.Client[v1.GetKoorClusterRequest, v1.GetKoorClusterResponse]
	getTroubleshootReport *connect.Client[v1.GetTroubleshootReportRequest, v1.GetTroubleshootReportResponse]
	setScrubbingSchedule  *connect.Client[v1.SetScrubbingScheduleRequest, v1.SetScrubbingScheduleResponse]
}

// GetKoorCluster calls api.services.cluster.v1.ClusterService.GetKoorCluster.
func (c *clusterServiceClient) GetKoorCluster(ctx context.Context, req *connect.Request[v1.GetKoorClusterRequest]) (*connect.Response[v1.GetKoorClusterResponse], error) {
	return c.getKoorCluster.CallUnary(ctx, req)
}

// GetTroubleshootReport calls api.services.cluster.v1.ClusterService.GetTroubleshootReport.
func (c *clusterServiceClient) GetTroubleshootReport(ctx context.Context, req *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error) {
	return c.getTroubleshootReport.CallUnary(ctx, req)
}

// SetScrubbingSchedule calls api.services.cluster.v1.ClusterService.SetScrubbingSchedule.
func (c *clusterServiceClient) SetScrubbingSchedule(ctx context.Context, req *connect.Request[v1.SetScrubbingScheduleRequest]) (*connect.Response[v1.SetScrubbingScheduleResponse], error) {
	return c.setScrubbingSchedule.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the api.services.cluster.v1.ClusterService service.
type ClusterServiceHandler interface {
	GetKoorCluster(context.Context, *connect.Request[v1.GetKoorClusterRequest]) (*connect.Response[v1.GetKoorClusterResponse], error)
	GetTroubleshootReport(context.Context, *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error)
	SetScrubbingSchedule(context.Context, *connect.Request[v1.SetScrubbingScheduleRequest]) (*connect.Response[v1.SetScrubbingScheduleResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceGetKoorClusterHandler := connect.NewUnaryHandler(
		ClusterServiceGetKoorClusterProcedure,
		svc.GetKoorCluster,
		opts...,
	)
	clusterServiceGetTroubleshootReportHandler := connect.NewUnaryHandler(
		ClusterServiceGetTroubleshootReportProcedure,
		svc.GetTroubleshootReport,
		opts...,
	)
	clusterServiceSetScrubbingScheduleHandler := connect.NewUnaryHandler(
		ClusterServiceSetScrubbingScheduleProcedure,
		svc.SetScrubbingSchedule,
		opts...,
	)
	return "/api.services.cluster.v1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceGetKoorClusterProcedure:
			clusterServiceGetKoorClusterHandler.ServeHTTP(w, r)
		case ClusterServiceGetTroubleshootReportProcedure:
			clusterServiceGetTroubleshootReportHandler.ServeHTTP(w, r)
		case ClusterServiceSetScrubbingScheduleProcedure:
			clusterServiceSetScrubbingScheduleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) GetKoorCluster(context.Context, *connect.Request[v1.GetKoorClusterRequest]) (*connect.Response[v1.GetKoorClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.cluster.v1.ClusterService.GetKoorCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetTroubleshootReport(context.Context, *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.cluster.v1.ClusterService.GetTroubleshootReport is not implemented"))
}

func (UnimplementedClusterServiceHandler) SetScrubbingSchedule(context.Context, *connect.Request[v1.SetScrubbingScheduleRequest]) (*connect.Response[v1.SetScrubbingScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.cluster.v1.ClusterService.SetScrubbingSchedule is not implemented"))
}
