// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/services/ceph/v1/ceph.proto

package cephv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCephUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCephUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCephUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCephUsersRequestMultiError, or nil if none found.
func (m *GetCephUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCephUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCephUsersRequestMultiError(errors)
	}

	return nil
}

// GetCephUsersRequestMultiError is an error wrapping multiple validation
// errors returned by GetCephUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCephUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCephUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCephUsersRequestMultiError) AllErrors() []error { return m }

// GetCephUsersRequestValidationError is the validation error returned by
// GetCephUsersRequest.Validate if the designated constraints aren't met.
type GetCephUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCephUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCephUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCephUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCephUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCephUsersRequestValidationError) ErrorName() string {
	return "GetCephUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCephUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCephUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCephUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCephUsersRequestValidationError{}

// Validate checks the field values on GetCephUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCephUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCephUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCephUsersResponseMultiError, or nil if none found.
func (m *GetCephUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCephUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCephUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCephUsersResponseValidationError{
						field:  fmt.Sprintf("CephUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCephUsersResponseValidationError{
						field:  fmt.Sprintf("CephUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCephUsersResponseValidationError{
					field:  fmt.Sprintf("CephUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCephUsersResponseMultiError(errors)
	}

	return nil
}

// GetCephUsersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCephUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCephUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCephUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCephUsersResponseMultiError) AllErrors() []error { return m }

// GetCephUsersResponseValidationError is the validation error returned by
// GetCephUsersResponse.Validate if the designated constraints aren't met.
type GetCephUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCephUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCephUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCephUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCephUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCephUsersResponseValidationError) ErrorName() string {
	return "GetCephUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCephUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCephUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCephUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCephUsersResponseValidationError{}

// Validate checks the field values on CreateCephUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCephUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCephUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCephUsersRequestMultiError, or nil if none found.
func (m *CreateCephUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCephUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCephUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCephUsersRequestValidationError{
					field:  "CephUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCephUsersRequestValidationError{
					field:  "CephUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCephUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCephUsersRequestValidationError{
				field:  "CephUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCephUsersRequestMultiError(errors)
	}

	return nil
}

// CreateCephUsersRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCephUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCephUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCephUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCephUsersRequestMultiError) AllErrors() []error { return m }

// CreateCephUsersRequestValidationError is the validation error returned by
// CreateCephUsersRequest.Validate if the designated constraints aren't met.
type CreateCephUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCephUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCephUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCephUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCephUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCephUsersRequestValidationError) ErrorName() string {
	return "CreateCephUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCephUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCephUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCephUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCephUsersRequestValidationError{}

// Validate checks the field values on CreateCephUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCephUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCephUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCephUsersResponseMultiError, or nil if none found.
func (m *CreateCephUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCephUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCephUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCephUsersResponseValidationError{
					field:  "CephUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCephUsersResponseValidationError{
					field:  "CephUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCephUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCephUsersResponseValidationError{
				field:  "CephUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCephUsersResponseMultiError(errors)
	}

	return nil
}

// CreateCephUsersResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCephUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCephUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCephUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCephUsersResponseMultiError) AllErrors() []error { return m }

// CreateCephUsersResponseValidationError is the validation error returned by
// CreateCephUsersResponse.Validate if the designated constraints aren't met.
type CreateCephUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCephUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCephUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCephUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCephUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCephUsersResponseValidationError) ErrorName() string {
	return "CreateCephUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCephUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCephUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCephUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCephUsersResponseValidationError{}
