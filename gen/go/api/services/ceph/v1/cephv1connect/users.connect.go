// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/services/ceph/v1/users.proto

package cephv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/koor-tech/data-control-center/gen/go/api/services/ceph/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// CephUsersServiceName is the fully-qualified name of the CephUsersService service.
	CephUsersServiceName = "api.services.ceph.v1.CephUsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CephUsersServiceListCephUsersProcedure is the fully-qualified name of the CephUsersService's
	// ListCephUsers RPC.
	CephUsersServiceListCephUsersProcedure = "/api.services.ceph.v1.CephUsersService/ListCephUsers"
	// CephUsersServiceCreateCephUserProcedure is the fully-qualified name of the CephUsersService's
	// CreateCephUser RPC.
	CephUsersServiceCreateCephUserProcedure = "/api.services.ceph.v1.CephUsersService/CreateCephUser"
	// CephUsersServiceDeleteCephUserProcedure is the fully-qualified name of the CephUsersService's
	// DeleteCephUser RPC.
	CephUsersServiceDeleteCephUserProcedure = "/api.services.ceph.v1.CephUsersService/DeleteCephUser"
)

// CephUsersServiceClient is a client for the api.services.ceph.v1.CephUsersService service.
type CephUsersServiceClient interface {
	ListCephUsers(context.Context, *connect.Request[v1.ListCephUsersRequest]) (*connect.Response[v1.ListCephUsersResponse], error)
	CreateCephUser(context.Context, *connect.Request[v1.CreateCephUserRequest]) (*connect.Response[v1.CreateCephUserResponse], error)
	DeleteCephUser(context.Context, *connect.Request[v1.DeleteCephUserRequest]) (*connect.Response[v1.DeleteCephUserResponse], error)
}

// NewCephUsersServiceClient constructs a client for the api.services.ceph.v1.CephUsersService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCephUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CephUsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cephUsersServiceClient{
		listCephUsers: connect.NewClient[v1.ListCephUsersRequest, v1.ListCephUsersResponse](
			httpClient,
			baseURL+CephUsersServiceListCephUsersProcedure,
			opts...,
		),
		createCephUser: connect.NewClient[v1.CreateCephUserRequest, v1.CreateCephUserResponse](
			httpClient,
			baseURL+CephUsersServiceCreateCephUserProcedure,
			opts...,
		),
		deleteCephUser: connect.NewClient[v1.DeleteCephUserRequest, v1.DeleteCephUserResponse](
			httpClient,
			baseURL+CephUsersServiceDeleteCephUserProcedure,
			opts...,
		),
	}
}

// cephUsersServiceClient implements CephUsersServiceClient.
type cephUsersServiceClient struct {
	listCephUsers  *connect.Client[v1.ListCephUsersRequest, v1.ListCephUsersResponse]
	createCephUser *connect.Client[v1.CreateCephUserRequest, v1.CreateCephUserResponse]
	deleteCephUser *connect.Client[v1.DeleteCephUserRequest, v1.DeleteCephUserResponse]
}

// ListCephUsers calls api.services.ceph.v1.CephUsersService.ListCephUsers.
func (c *cephUsersServiceClient) ListCephUsers(ctx context.Context, req *connect.Request[v1.ListCephUsersRequest]) (*connect.Response[v1.ListCephUsersResponse], error) {
	return c.listCephUsers.CallUnary(ctx, req)
}

// CreateCephUser calls api.services.ceph.v1.CephUsersService.CreateCephUser.
func (c *cephUsersServiceClient) CreateCephUser(ctx context.Context, req *connect.Request[v1.CreateCephUserRequest]) (*connect.Response[v1.CreateCephUserResponse], error) {
	return c.createCephUser.CallUnary(ctx, req)
}

// DeleteCephUser calls api.services.ceph.v1.CephUsersService.DeleteCephUser.
func (c *cephUsersServiceClient) DeleteCephUser(ctx context.Context, req *connect.Request[v1.DeleteCephUserRequest]) (*connect.Response[v1.DeleteCephUserResponse], error) {
	return c.deleteCephUser.CallUnary(ctx, req)
}

// CephUsersServiceHandler is an implementation of the api.services.ceph.v1.CephUsersService
// service.
type CephUsersServiceHandler interface {
	ListCephUsers(context.Context, *connect.Request[v1.ListCephUsersRequest]) (*connect.Response[v1.ListCephUsersResponse], error)
	CreateCephUser(context.Context, *connect.Request[v1.CreateCephUserRequest]) (*connect.Response[v1.CreateCephUserResponse], error)
	DeleteCephUser(context.Context, *connect.Request[v1.DeleteCephUserRequest]) (*connect.Response[v1.DeleteCephUserResponse], error)
}

// NewCephUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCephUsersServiceHandler(svc CephUsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cephUsersServiceListCephUsersHandler := connect.NewUnaryHandler(
		CephUsersServiceListCephUsersProcedure,
		svc.ListCephUsers,
		opts...,
	)
	cephUsersServiceCreateCephUserHandler := connect.NewUnaryHandler(
		CephUsersServiceCreateCephUserProcedure,
		svc.CreateCephUser,
		opts...,
	)
	cephUsersServiceDeleteCephUserHandler := connect.NewUnaryHandler(
		CephUsersServiceDeleteCephUserProcedure,
		svc.DeleteCephUser,
		opts...,
	)
	return "/api.services.ceph.v1.CephUsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CephUsersServiceListCephUsersProcedure:
			cephUsersServiceListCephUsersHandler.ServeHTTP(w, r)
		case CephUsersServiceCreateCephUserProcedure:
			cephUsersServiceCreateCephUserHandler.ServeHTTP(w, r)
		case CephUsersServiceDeleteCephUserProcedure:
			cephUsersServiceDeleteCephUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCephUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCephUsersServiceHandler struct{}

func (UnimplementedCephUsersServiceHandler) ListCephUsers(context.Context, *connect.Request[v1.ListCephUsersRequest]) (*connect.Response[v1.ListCephUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.ceph.v1.CephUsersService.ListCephUsers is not implemented"))
}

func (UnimplementedCephUsersServiceHandler) CreateCephUser(context.Context, *connect.Request[v1.CreateCephUserRequest]) (*connect.Response[v1.CreateCephUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.ceph.v1.CephUsersService.CreateCephUser is not implemented"))
}

func (UnimplementedCephUsersServiceHandler) DeleteCephUser(context.Context, *connect.Request[v1.DeleteCephUserRequest]) (*connect.Response[v1.DeleteCephUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.ceph.v1.CephUsersService.DeleteCephUser is not implemented"))
}
