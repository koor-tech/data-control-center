// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/services/auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/koor-tech/data-control-center/gen/go/api/services/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "api.services.auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/api.services.auth.v1.AuthService/Login"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/api.services.auth.v1.AuthService/Logout"
	// AuthServiceCheckTokenProcedure is the fully-qualified name of the AuthService's CheckToken RPC.
	AuthServiceCheckTokenProcedure = "/api.services.auth.v1.AuthService/CheckToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor          = v1.File_api_services_auth_v1_auth_proto.Services().ByName("AuthService")
	authServiceLoginMethodDescriptor      = authServiceServiceDescriptor.Methods().ByName("Login")
	authServiceLogoutMethodDescriptor     = authServiceServiceDescriptor.Methods().ByName("Logout")
	authServiceCheckTokenMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("CheckToken")
)

// AuthServiceClient is a client for the api.services.auth.v1.AuthService service.
type AuthServiceClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	CheckToken(context.Context, *connect.Request[v1.CheckTokenRequest]) (*connect.Response[v1.CheckTokenResponse], error)
}

// NewAuthServiceClient constructs a client for the api.services.auth.v1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceLogoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkToken: connect.NewClient[v1.CheckTokenRequest, v1.CheckTokenResponse](
			httpClient,
			baseURL+AuthServiceCheckTokenProcedure,
			connect.WithSchema(authServiceCheckTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login      *connect.Client[v1.LoginRequest, v1.LoginResponse]
	logout     *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	checkToken *connect.Client[v1.CheckTokenRequest, v1.CheckTokenResponse]
}

// Login calls api.services.auth.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls api.services.auth.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// CheckToken calls api.services.auth.v1.AuthService.CheckToken.
func (c *authServiceClient) CheckToken(ctx context.Context, req *connect.Request[v1.CheckTokenRequest]) (*connect.Response[v1.CheckTokenResponse], error) {
	return c.checkToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the api.services.auth.v1.AuthService service.
type AuthServiceHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	CheckToken(context.Context, *connect.Request[v1.CheckTokenRequest]) (*connect.Response[v1.CheckTokenResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceLogoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCheckTokenHandler := connect.NewUnaryHandler(
		AuthServiceCheckTokenProcedure,
		svc.CheckToken,
		connect.WithSchema(authServiceCheckTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.services.auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceCheckTokenProcedure:
			authServiceCheckTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.auth.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.auth.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) CheckToken(context.Context, *connect.Request[v1.CheckTokenRequest]) (*connect.Response[v1.CheckTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.auth.v1.AuthService.CheckToken is not implemented"))
}
