// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/services/troubleshooting/v1/troubleshooting.proto

package troubleshootingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/koor-tech/data-control-center/gen/go/api/services/troubleshooting/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TroubleshootingServiceName is the fully-qualified name of the TroubleshootingService service.
	TroubleshootingServiceName = "api.services.troubleshooting.v1.TroubleshootingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TroubleshootingServiceGetTroubleshootReportProcedure is the fully-qualified name of the
	// TroubleshootingService's GetTroubleshootReport RPC.
	TroubleshootingServiceGetTroubleshootReportProcedure = "/api.services.troubleshooting.v1.TroubleshootingService/GetTroubleshootReport"
	// TroubleshootingServiceGetNetworkTestStatusProcedure is the fully-qualified name of the
	// TroubleshootingService's GetNetworkTestStatus RPC.
	TroubleshootingServiceGetNetworkTestStatusProcedure = "/api.services.troubleshooting.v1.TroubleshootingService/GetNetworkTestStatus"
	// TroubleshootingServiceStartNetworkTestProcedure is the fully-qualified name of the
	// TroubleshootingService's StartNetworkTest RPC.
	TroubleshootingServiceStartNetworkTestProcedure = "/api.services.troubleshooting.v1.TroubleshootingService/StartNetworkTest"
	// TroubleshootingServiceCancelNetworkTestProcedure is the fully-qualified name of the
	// TroubleshootingService's CancelNetworkTest RPC.
	TroubleshootingServiceCancelNetworkTestProcedure = "/api.services.troubleshooting.v1.TroubleshootingService/CancelNetworkTest"
	// TroubleshootingServiceGetNetworkTestResultsProcedure is the fully-qualified name of the
	// TroubleshootingService's GetNetworkTestResults RPC.
	TroubleshootingServiceGetNetworkTestResultsProcedure = "/api.services.troubleshooting.v1.TroubleshootingService/GetNetworkTestResults"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	troubleshootingServiceServiceDescriptor                     = v1.File_api_services_troubleshooting_v1_troubleshooting_proto.Services().ByName("TroubleshootingService")
	troubleshootingServiceGetTroubleshootReportMethodDescriptor = troubleshootingServiceServiceDescriptor.Methods().ByName("GetTroubleshootReport")
	troubleshootingServiceGetNetworkTestStatusMethodDescriptor  = troubleshootingServiceServiceDescriptor.Methods().ByName("GetNetworkTestStatus")
	troubleshootingServiceStartNetworkTestMethodDescriptor      = troubleshootingServiceServiceDescriptor.Methods().ByName("StartNetworkTest")
	troubleshootingServiceCancelNetworkTestMethodDescriptor     = troubleshootingServiceServiceDescriptor.Methods().ByName("CancelNetworkTest")
	troubleshootingServiceGetNetworkTestResultsMethodDescriptor = troubleshootingServiceServiceDescriptor.Methods().ByName("GetNetworkTestResults")
)

// TroubleshootingServiceClient is a client for the
// api.services.troubleshooting.v1.TroubleshootingService service.
type TroubleshootingServiceClient interface {
	GetTroubleshootReport(context.Context, *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error)
	GetNetworkTestStatus(context.Context, *connect.Request[v1.GetNetworkTestStatusRequest]) (*connect.Response[v1.GetNetworkTestStatusResponse], error)
	StartNetworkTest(context.Context, *connect.Request[v1.StartNetworkTestRequest]) (*connect.Response[v1.StartNetworkTestResponse], error)
	CancelNetworkTest(context.Context, *connect.Request[v1.CancelNetworkTestRequest]) (*connect.Response[v1.CancelNetworkTestResponse], error)
	GetNetworkTestResults(context.Context, *connect.Request[v1.GetNetworkTestResultsRequest]) (*connect.Response[v1.GetNetworkTestResultsResponse], error)
}

// NewTroubleshootingServiceClient constructs a client for the
// api.services.troubleshooting.v1.TroubleshootingService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTroubleshootingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TroubleshootingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &troubleshootingServiceClient{
		getTroubleshootReport: connect.NewClient[v1.GetTroubleshootReportRequest, v1.GetTroubleshootReportResponse](
			httpClient,
			baseURL+TroubleshootingServiceGetTroubleshootReportProcedure,
			connect.WithSchema(troubleshootingServiceGetTroubleshootReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetworkTestStatus: connect.NewClient[v1.GetNetworkTestStatusRequest, v1.GetNetworkTestStatusResponse](
			httpClient,
			baseURL+TroubleshootingServiceGetNetworkTestStatusProcedure,
			connect.WithSchema(troubleshootingServiceGetNetworkTestStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startNetworkTest: connect.NewClient[v1.StartNetworkTestRequest, v1.StartNetworkTestResponse](
			httpClient,
			baseURL+TroubleshootingServiceStartNetworkTestProcedure,
			connect.WithSchema(troubleshootingServiceStartNetworkTestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelNetworkTest: connect.NewClient[v1.CancelNetworkTestRequest, v1.CancelNetworkTestResponse](
			httpClient,
			baseURL+TroubleshootingServiceCancelNetworkTestProcedure,
			connect.WithSchema(troubleshootingServiceCancelNetworkTestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetworkTestResults: connect.NewClient[v1.GetNetworkTestResultsRequest, v1.GetNetworkTestResultsResponse](
			httpClient,
			baseURL+TroubleshootingServiceGetNetworkTestResultsProcedure,
			connect.WithSchema(troubleshootingServiceGetNetworkTestResultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// troubleshootingServiceClient implements TroubleshootingServiceClient.
type troubleshootingServiceClient struct {
	getTroubleshootReport *connect.Client[v1.GetTroubleshootReportRequest, v1.GetTroubleshootReportResponse]
	getNetworkTestStatus  *connect.Client[v1.GetNetworkTestStatusRequest, v1.GetNetworkTestStatusResponse]
	startNetworkTest      *connect.Client[v1.StartNetworkTestRequest, v1.StartNetworkTestResponse]
	cancelNetworkTest     *connect.Client[v1.CancelNetworkTestRequest, v1.CancelNetworkTestResponse]
	getNetworkTestResults *connect.Client[v1.GetNetworkTestResultsRequest, v1.GetNetworkTestResultsResponse]
}

// GetTroubleshootReport calls
// api.services.troubleshooting.v1.TroubleshootingService.GetTroubleshootReport.
func (c *troubleshootingServiceClient) GetTroubleshootReport(ctx context.Context, req *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error) {
	return c.getTroubleshootReport.CallUnary(ctx, req)
}

// GetNetworkTestStatus calls
// api.services.troubleshooting.v1.TroubleshootingService.GetNetworkTestStatus.
func (c *troubleshootingServiceClient) GetNetworkTestStatus(ctx context.Context, req *connect.Request[v1.GetNetworkTestStatusRequest]) (*connect.Response[v1.GetNetworkTestStatusResponse], error) {
	return c.getNetworkTestStatus.CallUnary(ctx, req)
}

// StartNetworkTest calls api.services.troubleshooting.v1.TroubleshootingService.StartNetworkTest.
func (c *troubleshootingServiceClient) StartNetworkTest(ctx context.Context, req *connect.Request[v1.StartNetworkTestRequest]) (*connect.Response[v1.StartNetworkTestResponse], error) {
	return c.startNetworkTest.CallUnary(ctx, req)
}

// CancelNetworkTest calls api.services.troubleshooting.v1.TroubleshootingService.CancelNetworkTest.
func (c *troubleshootingServiceClient) CancelNetworkTest(ctx context.Context, req *connect.Request[v1.CancelNetworkTestRequest]) (*connect.Response[v1.CancelNetworkTestResponse], error) {
	return c.cancelNetworkTest.CallUnary(ctx, req)
}

// GetNetworkTestResults calls
// api.services.troubleshooting.v1.TroubleshootingService.GetNetworkTestResults.
func (c *troubleshootingServiceClient) GetNetworkTestResults(ctx context.Context, req *connect.Request[v1.GetNetworkTestResultsRequest]) (*connect.Response[v1.GetNetworkTestResultsResponse], error) {
	return c.getNetworkTestResults.CallUnary(ctx, req)
}

// TroubleshootingServiceHandler is an implementation of the
// api.services.troubleshooting.v1.TroubleshootingService service.
type TroubleshootingServiceHandler interface {
	GetTroubleshootReport(context.Context, *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error)
	GetNetworkTestStatus(context.Context, *connect.Request[v1.GetNetworkTestStatusRequest]) (*connect.Response[v1.GetNetworkTestStatusResponse], error)
	StartNetworkTest(context.Context, *connect.Request[v1.StartNetworkTestRequest]) (*connect.Response[v1.StartNetworkTestResponse], error)
	CancelNetworkTest(context.Context, *connect.Request[v1.CancelNetworkTestRequest]) (*connect.Response[v1.CancelNetworkTestResponse], error)
	GetNetworkTestResults(context.Context, *connect.Request[v1.GetNetworkTestResultsRequest]) (*connect.Response[v1.GetNetworkTestResultsResponse], error)
}

// NewTroubleshootingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTroubleshootingServiceHandler(svc TroubleshootingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	troubleshootingServiceGetTroubleshootReportHandler := connect.NewUnaryHandler(
		TroubleshootingServiceGetTroubleshootReportProcedure,
		svc.GetTroubleshootReport,
		connect.WithSchema(troubleshootingServiceGetTroubleshootReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	troubleshootingServiceGetNetworkTestStatusHandler := connect.NewUnaryHandler(
		TroubleshootingServiceGetNetworkTestStatusProcedure,
		svc.GetNetworkTestStatus,
		connect.WithSchema(troubleshootingServiceGetNetworkTestStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	troubleshootingServiceStartNetworkTestHandler := connect.NewUnaryHandler(
		TroubleshootingServiceStartNetworkTestProcedure,
		svc.StartNetworkTest,
		connect.WithSchema(troubleshootingServiceStartNetworkTestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	troubleshootingServiceCancelNetworkTestHandler := connect.NewUnaryHandler(
		TroubleshootingServiceCancelNetworkTestProcedure,
		svc.CancelNetworkTest,
		connect.WithSchema(troubleshootingServiceCancelNetworkTestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	troubleshootingServiceGetNetworkTestResultsHandler := connect.NewUnaryHandler(
		TroubleshootingServiceGetNetworkTestResultsProcedure,
		svc.GetNetworkTestResults,
		connect.WithSchema(troubleshootingServiceGetNetworkTestResultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.services.troubleshooting.v1.TroubleshootingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TroubleshootingServiceGetTroubleshootReportProcedure:
			troubleshootingServiceGetTroubleshootReportHandler.ServeHTTP(w, r)
		case TroubleshootingServiceGetNetworkTestStatusProcedure:
			troubleshootingServiceGetNetworkTestStatusHandler.ServeHTTP(w, r)
		case TroubleshootingServiceStartNetworkTestProcedure:
			troubleshootingServiceStartNetworkTestHandler.ServeHTTP(w, r)
		case TroubleshootingServiceCancelNetworkTestProcedure:
			troubleshootingServiceCancelNetworkTestHandler.ServeHTTP(w, r)
		case TroubleshootingServiceGetNetworkTestResultsProcedure:
			troubleshootingServiceGetNetworkTestResultsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTroubleshootingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTroubleshootingServiceHandler struct{}

func (UnimplementedTroubleshootingServiceHandler) GetTroubleshootReport(context.Context, *connect.Request[v1.GetTroubleshootReportRequest]) (*connect.Response[v1.GetTroubleshootReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.troubleshooting.v1.TroubleshootingService.GetTroubleshootReport is not implemented"))
}

func (UnimplementedTroubleshootingServiceHandler) GetNetworkTestStatus(context.Context, *connect.Request[v1.GetNetworkTestStatusRequest]) (*connect.Response[v1.GetNetworkTestStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.troubleshooting.v1.TroubleshootingService.GetNetworkTestStatus is not implemented"))
}

func (UnimplementedTroubleshootingServiceHandler) StartNetworkTest(context.Context, *connect.Request[v1.StartNetworkTestRequest]) (*connect.Response[v1.StartNetworkTestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.troubleshooting.v1.TroubleshootingService.StartNetworkTest is not implemented"))
}

func (UnimplementedTroubleshootingServiceHandler) CancelNetworkTest(context.Context, *connect.Request[v1.CancelNetworkTestRequest]) (*connect.Response[v1.CancelNetworkTestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.troubleshooting.v1.TroubleshootingService.CancelNetworkTest is not implemented"))
}

func (UnimplementedTroubleshootingServiceHandler) GetNetworkTestResults(context.Context, *connect.Request[v1.GetNetworkTestResultsRequest]) (*connect.Response[v1.GetNetworkTestResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.services.troubleshooting.v1.TroubleshootingService.GetNetworkTestResults is not implemented"))
}
