// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/services/troubleshooting/v1/troubleshooting.proto

package troubleshootingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TroubleshootingService_GetTroubleshootReport_FullMethodName = "/api.services.troubleshooting.v1.TroubleshootingService/GetTroubleshootReport"
	TroubleshootingService_GetNetworkTestStatus_FullMethodName  = "/api.services.troubleshooting.v1.TroubleshootingService/GetNetworkTestStatus"
	TroubleshootingService_StartNetworkTest_FullMethodName      = "/api.services.troubleshooting.v1.TroubleshootingService/StartNetworkTest"
	TroubleshootingService_CancelNetworkTest_FullMethodName     = "/api.services.troubleshooting.v1.TroubleshootingService/CancelNetworkTest"
	TroubleshootingService_GetNetworkTestResults_FullMethodName = "/api.services.troubleshooting.v1.TroubleshootingService/GetNetworkTestResults"
)

// TroubleshootingServiceClient is the client API for TroubleshootingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TroubleshootingServiceClient interface {
	GetTroubleshootReport(ctx context.Context, in *GetTroubleshootReportRequest, opts ...grpc.CallOption) (*GetTroubleshootReportResponse, error)
	GetNetworkTestStatus(ctx context.Context, in *GetNetworkTestStatusRequest, opts ...grpc.CallOption) (*GetNetworkTestStatusResponse, error)
	StartNetworkTest(ctx context.Context, in *StartNetworkTestRequest, opts ...grpc.CallOption) (*StartNetworkTestResponse, error)
	CancelNetworkTest(ctx context.Context, in *CancelNetworkTestRequest, opts ...grpc.CallOption) (*CancelNetworkTestResponse, error)
	GetNetworkTestResults(ctx context.Context, in *GetNetworkTestResultsRequest, opts ...grpc.CallOption) (*GetNetworkTestResultsResponse, error)
}

type troubleshootingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTroubleshootingServiceClient(cc grpc.ClientConnInterface) TroubleshootingServiceClient {
	return &troubleshootingServiceClient{cc}
}

func (c *troubleshootingServiceClient) GetTroubleshootReport(ctx context.Context, in *GetTroubleshootReportRequest, opts ...grpc.CallOption) (*GetTroubleshootReportResponse, error) {
	out := new(GetTroubleshootReportResponse)
	err := c.cc.Invoke(ctx, TroubleshootingService_GetTroubleshootReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleshootingServiceClient) GetNetworkTestStatus(ctx context.Context, in *GetNetworkTestStatusRequest, opts ...grpc.CallOption) (*GetNetworkTestStatusResponse, error) {
	out := new(GetNetworkTestStatusResponse)
	err := c.cc.Invoke(ctx, TroubleshootingService_GetNetworkTestStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleshootingServiceClient) StartNetworkTest(ctx context.Context, in *StartNetworkTestRequest, opts ...grpc.CallOption) (*StartNetworkTestResponse, error) {
	out := new(StartNetworkTestResponse)
	err := c.cc.Invoke(ctx, TroubleshootingService_StartNetworkTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleshootingServiceClient) CancelNetworkTest(ctx context.Context, in *CancelNetworkTestRequest, opts ...grpc.CallOption) (*CancelNetworkTestResponse, error) {
	out := new(CancelNetworkTestResponse)
	err := c.cc.Invoke(ctx, TroubleshootingService_CancelNetworkTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleshootingServiceClient) GetNetworkTestResults(ctx context.Context, in *GetNetworkTestResultsRequest, opts ...grpc.CallOption) (*GetNetworkTestResultsResponse, error) {
	out := new(GetNetworkTestResultsResponse)
	err := c.cc.Invoke(ctx, TroubleshootingService_GetNetworkTestResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TroubleshootingServiceServer is the server API for TroubleshootingService service.
// All implementations should embed UnimplementedTroubleshootingServiceServer
// for forward compatibility
type TroubleshootingServiceServer interface {
	GetTroubleshootReport(context.Context, *GetTroubleshootReportRequest) (*GetTroubleshootReportResponse, error)
	GetNetworkTestStatus(context.Context, *GetNetworkTestStatusRequest) (*GetNetworkTestStatusResponse, error)
	StartNetworkTest(context.Context, *StartNetworkTestRequest) (*StartNetworkTestResponse, error)
	CancelNetworkTest(context.Context, *CancelNetworkTestRequest) (*CancelNetworkTestResponse, error)
	GetNetworkTestResults(context.Context, *GetNetworkTestResultsRequest) (*GetNetworkTestResultsResponse, error)
}

// UnimplementedTroubleshootingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTroubleshootingServiceServer struct {
}

func (UnimplementedTroubleshootingServiceServer) GetTroubleshootReport(context.Context, *GetTroubleshootReportRequest) (*GetTroubleshootReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTroubleshootReport not implemented")
}
func (UnimplementedTroubleshootingServiceServer) GetNetworkTestStatus(context.Context, *GetNetworkTestStatusRequest) (*GetNetworkTestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkTestStatus not implemented")
}
func (UnimplementedTroubleshootingServiceServer) StartNetworkTest(context.Context, *StartNetworkTestRequest) (*StartNetworkTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNetworkTest not implemented")
}
func (UnimplementedTroubleshootingServiceServer) CancelNetworkTest(context.Context, *CancelNetworkTestRequest) (*CancelNetworkTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNetworkTest not implemented")
}
func (UnimplementedTroubleshootingServiceServer) GetNetworkTestResults(context.Context, *GetNetworkTestResultsRequest) (*GetNetworkTestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkTestResults not implemented")
}

// UnsafeTroubleshootingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TroubleshootingServiceServer will
// result in compilation errors.
type UnsafeTroubleshootingServiceServer interface {
	mustEmbedUnimplementedTroubleshootingServiceServer()
}

func RegisterTroubleshootingServiceServer(s grpc.ServiceRegistrar, srv TroubleshootingServiceServer) {
	s.RegisterService(&TroubleshootingService_ServiceDesc, srv)
}

func _TroubleshootingService_GetTroubleshootReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTroubleshootReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleshootingServiceServer).GetTroubleshootReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TroubleshootingService_GetTroubleshootReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleshootingServiceServer).GetTroubleshootReport(ctx, req.(*GetTroubleshootReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleshootingService_GetNetworkTestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkTestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleshootingServiceServer).GetNetworkTestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TroubleshootingService_GetNetworkTestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleshootingServiceServer).GetNetworkTestStatus(ctx, req.(*GetNetworkTestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleshootingService_StartNetworkTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNetworkTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleshootingServiceServer).StartNetworkTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TroubleshootingService_StartNetworkTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleshootingServiceServer).StartNetworkTest(ctx, req.(*StartNetworkTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleshootingService_CancelNetworkTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelNetworkTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleshootingServiceServer).CancelNetworkTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TroubleshootingService_CancelNetworkTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleshootingServiceServer).CancelNetworkTest(ctx, req.(*CancelNetworkTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleshootingService_GetNetworkTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkTestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleshootingServiceServer).GetNetworkTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TroubleshootingService_GetNetworkTestResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleshootingServiceServer).GetNetworkTestResults(ctx, req.(*GetNetworkTestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TroubleshootingService_ServiceDesc is the grpc.ServiceDesc for TroubleshootingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TroubleshootingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.services.troubleshooting.v1.TroubleshootingService",
	HandlerType: (*TroubleshootingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTroubleshootReport",
			Handler:    _TroubleshootingService_GetTroubleshootReport_Handler,
		},
		{
			MethodName: "GetNetworkTestStatus",
			Handler:    _TroubleshootingService_GetNetworkTestStatus_Handler,
		},
		{
			MethodName: "StartNetworkTest",
			Handler:    _TroubleshootingService_StartNetworkTest_Handler,
		},
		{
			MethodName: "CancelNetworkTest",
			Handler:    _TroubleshootingService_CancelNetworkTest_Handler,
		},
		{
			MethodName: "GetNetworkTestResults",
			Handler:    _TroubleshootingService_GetNetworkTestResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/troubleshooting/v1/troubleshooting.proto",
}
