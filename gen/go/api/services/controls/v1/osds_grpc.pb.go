// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/services/controls/v1/osds.proto

package controlsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OSDsService_GetScrubbingSchedule_FullMethodName = "/api.services.controls.v1.OSDsService/GetScrubbingSchedule"
	OSDsService_SetScrubbingSchedule_FullMethodName = "/api.services.controls.v1.OSDsService/SetScrubbingSchedule"
)

// OSDsServiceClient is the client API for OSDsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSDsServiceClient interface {
	GetScrubbingSchedule(ctx context.Context, in *GetScrubbingScheduleRequest, opts ...grpc.CallOption) (*GetScrubbingScheduleResponse, error)
	SetScrubbingSchedule(ctx context.Context, in *SetScrubbingScheduleRequest, opts ...grpc.CallOption) (*SetScrubbingScheduleResponse, error)
}

type oSDsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOSDsServiceClient(cc grpc.ClientConnInterface) OSDsServiceClient {
	return &oSDsServiceClient{cc}
}

func (c *oSDsServiceClient) GetScrubbingSchedule(ctx context.Context, in *GetScrubbingScheduleRequest, opts ...grpc.CallOption) (*GetScrubbingScheduleResponse, error) {
	out := new(GetScrubbingScheduleResponse)
	err := c.cc.Invoke(ctx, OSDsService_GetScrubbingSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSDsServiceClient) SetScrubbingSchedule(ctx context.Context, in *SetScrubbingScheduleRequest, opts ...grpc.CallOption) (*SetScrubbingScheduleResponse, error) {
	out := new(SetScrubbingScheduleResponse)
	err := c.cc.Invoke(ctx, OSDsService_SetScrubbingSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSDsServiceServer is the server API for OSDsService service.
// All implementations should embed UnimplementedOSDsServiceServer
// for forward compatibility
type OSDsServiceServer interface {
	GetScrubbingSchedule(context.Context, *GetScrubbingScheduleRequest) (*GetScrubbingScheduleResponse, error)
	SetScrubbingSchedule(context.Context, *SetScrubbingScheduleRequest) (*SetScrubbingScheduleResponse, error)
}

// UnimplementedOSDsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOSDsServiceServer struct {
}

func (UnimplementedOSDsServiceServer) GetScrubbingSchedule(context.Context, *GetScrubbingScheduleRequest) (*GetScrubbingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrubbingSchedule not implemented")
}
func (UnimplementedOSDsServiceServer) SetScrubbingSchedule(context.Context, *SetScrubbingScheduleRequest) (*SetScrubbingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScrubbingSchedule not implemented")
}

// UnsafeOSDsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSDsServiceServer will
// result in compilation errors.
type UnsafeOSDsServiceServer interface {
	mustEmbedUnimplementedOSDsServiceServer()
}

func RegisterOSDsServiceServer(s grpc.ServiceRegistrar, srv OSDsServiceServer) {
	s.RegisterService(&OSDsService_ServiceDesc, srv)
}

func _OSDsService_GetScrubbingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrubbingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDsServiceServer).GetScrubbingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSDsService_GetScrubbingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDsServiceServer).GetScrubbingSchedule(ctx, req.(*GetScrubbingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSDsService_SetScrubbingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScrubbingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSDsServiceServer).SetScrubbingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSDsService_SetScrubbingSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSDsServiceServer).SetScrubbingSchedule(ctx, req.(*SetScrubbingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OSDsService_ServiceDesc is the grpc.ServiceDesc for OSDsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSDsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.services.controls.v1.OSDsService",
	HandlerType: (*OSDsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScrubbingSchedule",
			Handler:    _OSDsService_GetScrubbingSchedule_Handler,
		},
		{
			MethodName: "SetScrubbingSchedule",
			Handler:    _OSDsService_SetScrubbingSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/controls/v1/osds.proto",
}
