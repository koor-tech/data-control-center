// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/resources/ceph/v1/stats.proto

package cephv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MonService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonServiceMultiError, or
// nil if none found.
func (m *MonService) ValidateAll() error {
	return m.validate(true)
}

func (m *MonService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DaemonCount

	if all {
		switch v := interface{}(m.GetCreatedSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonServiceValidationError{
					field:  "CreatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonServiceValidationError{
					field:  "CreatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonServiceValidationError{
				field:  "CreatedSince",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonServiceValidationError{
					field:  "UpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonServiceValidationError{
					field:  "UpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonServiceValidationError{
				field:  "UpdatedSince",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MonServiceMultiError(errors)
	}

	return nil
}

// MonServiceMultiError is an error wrapping multiple validation errors
// returned by MonService.ValidateAll() if the designated constraints aren't met.
type MonServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonServiceMultiError) AllErrors() []error { return m }

// MonServiceValidationError is the validation error returned by
// MonService.Validate if the designated constraints aren't met.
type MonServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonServiceValidationError) ErrorName() string { return "MonServiceValidationError" }

// Error satisfies the builtin error interface
func (e MonServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonServiceValidationError{}

// Validate checks the field values on MgrService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MgrService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MgrService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MgrServiceMultiError, or
// nil if none found.
func (m *MgrService) ValidateAll() error {
	return m.validate(true)
}

func (m *MgrService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Active

	if all {
		switch v := interface{}(m.GetUpdatedSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MgrServiceValidationError{
					field:  "UpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MgrServiceValidationError{
					field:  "UpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MgrServiceValidationError{
				field:  "UpdatedSince",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MgrServiceMultiError(errors)
	}

	return nil
}

// MgrServiceMultiError is an error wrapping multiple validation errors
// returned by MgrService.ValidateAll() if the designated constraints aren't met.
type MgrServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MgrServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MgrServiceMultiError) AllErrors() []error { return m }

// MgrServiceValidationError is the validation error returned by
// MgrService.Validate if the designated constraints aren't met.
type MgrServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MgrServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MgrServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MgrServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MgrServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MgrServiceValidationError) ErrorName() string { return "MgrServiceValidationError" }

// Error satisfies the builtin error interface
func (e MgrServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMgrService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MgrServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MgrServiceValidationError{}

// Validate checks the field values on MdsService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MdsService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MdsService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MdsServiceMultiError, or
// nil if none found.
func (m *MdsService) ValidateAll() error {
	return m.validate(true)
}

func (m *MdsService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DaemonsUp

	// no validation rules for HotStandbyCount

	if len(errors) > 0 {
		return MdsServiceMultiError(errors)
	}

	return nil
}

// MdsServiceMultiError is an error wrapping multiple validation errors
// returned by MdsService.ValidateAll() if the designated constraints aren't met.
type MdsServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MdsServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MdsServiceMultiError) AllErrors() []error { return m }

// MdsServiceValidationError is the validation error returned by
// MdsService.Validate if the designated constraints aren't met.
type MdsServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MdsServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MdsServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MdsServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MdsServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MdsServiceValidationError) ErrorName() string { return "MdsServiceValidationError" }

// Error satisfies the builtin error interface
func (e MdsServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMdsService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MdsServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MdsServiceValidationError{}

// Validate checks the field values on OsdService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OsdService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OsdService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OsdServiceMultiError, or
// nil if none found.
func (m *OsdService) ValidateAll() error {
	return m.validate(true)
}

func (m *OsdService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OsdCount

	// no validation rules for OsdUp

	// no validation rules for OsdIn

	if all {
		switch v := interface{}(m.GetOsdUpUpdatedSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OsdServiceValidationError{
					field:  "OsdUpUpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OsdServiceValidationError{
					field:  "OsdUpUpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsdUpUpdatedSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OsdServiceValidationError{
				field:  "OsdUpUpdatedSince",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOsdInUpdatedSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OsdServiceValidationError{
					field:  "OsdInUpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OsdServiceValidationError{
					field:  "OsdInUpdatedSince",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsdInUpdatedSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OsdServiceValidationError{
				field:  "OsdInUpdatedSince",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OsdServiceMultiError(errors)
	}

	return nil
}

// OsdServiceMultiError is an error wrapping multiple validation errors
// returned by OsdService.ValidateAll() if the designated constraints aren't met.
type OsdServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OsdServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OsdServiceMultiError) AllErrors() []error { return m }

// OsdServiceValidationError is the validation error returned by
// OsdService.Validate if the designated constraints aren't met.
type OsdServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OsdServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OsdServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OsdServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OsdServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OsdServiceValidationError) ErrorName() string { return "OsdServiceValidationError" }

// Error satisfies the builtin error interface
func (e OsdServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOsdService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OsdServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OsdServiceValidationError{}

// Validate checks the field values on RgwService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RgwService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RgwService with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RgwServiceMultiError, or
// nil if none found.
func (m *RgwService) ValidateAll() error {
	return m.validate(true)
}

func (m *RgwService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActiveDaemon

	// no validation rules for HostCount

	// no validation rules for ZoneCount

	if len(errors) > 0 {
		return RgwServiceMultiError(errors)
	}

	return nil
}

// RgwServiceMultiError is an error wrapping multiple validation errors
// returned by RgwService.ValidateAll() if the designated constraints aren't met.
type RgwServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RgwServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RgwServiceMultiError) AllErrors() []error { return m }

// RgwServiceValidationError is the validation error returned by
// RgwService.Validate if the designated constraints aren't met.
type RgwServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RgwServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RgwServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RgwServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RgwServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RgwServiceValidationError) ErrorName() string { return "RgwServiceValidationError" }

// Error satisfies the builtin error interface
func (e RgwServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRgwService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RgwServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RgwServiceValidationError{}

// Validate checks the field values on Services with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Services) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Services with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicesMultiError, or nil
// if none found.
func (m *Services) ValidateAll() error {
	return m.validate(true)
}

func (m *Services) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Mon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMgr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mgr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mgr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMgr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Mgr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Mds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Mds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOsd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Osd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Osd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Osd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRgw()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Rgw",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Rgw",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRgw()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Rgw",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServicesMultiError(errors)
	}

	return nil
}

// ServicesMultiError is an error wrapping multiple validation errors returned
// by Services.ValidateAll() if the designated constraints aren't met.
type ServicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesMultiError) AllErrors() []error { return m }

// ServicesValidationError is the validation error returned by
// Services.Validate if the designated constraints aren't met.
type ServicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesValidationError) ErrorName() string { return "ServicesValidationError" }

// Error satisfies the builtin error interface
func (e ServicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesValidationError{}

// Validate checks the field values on PGs with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *PGs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PGs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PGsMultiError, or nil if none found.
func (m *PGs) ValidateAll() error {
	return m.validate(true)
}

func (m *PGs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActiveClean

	if len(errors) > 0 {
		return PGsMultiError(errors)
	}

	return nil
}

// PGsMultiError is an error wrapping multiple validation errors returned by
// PGs.ValidateAll() if the designated constraints aren't met.
type PGsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PGsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PGsMultiError) AllErrors() []error { return m }

// PGsValidationError is the validation error returned by PGs.Validate if the
// designated constraints aren't met.
type PGsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PGsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PGsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PGsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PGsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PGsValidationError) ErrorName() string { return "PGsValidationError" }

// Error satisfies the builtin error interface
func (e PGsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPGs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PGsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PGsValidationError{}

// Validate checks the field values on Pools with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pools) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pools with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PoolsMultiError, or nil if none found.
func (m *Pools) ValidateAll() error {
	return m.validate(true)
}

func (m *Pools) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pools

	if all {
		switch v := interface{}(m.GetPgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolsValidationError{
					field:  "Pgs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolsValidationError{
					field:  "Pgs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolsValidationError{
				field:  "Pgs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PoolsMultiError(errors)
	}

	return nil
}

// PoolsMultiError is an error wrapping multiple validation errors returned by
// Pools.ValidateAll() if the designated constraints aren't met.
type PoolsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolsMultiError) AllErrors() []error { return m }

// PoolsValidationError is the validation error returned by Pools.Validate if
// the designated constraints aren't met.
type PoolsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolsValidationError) ErrorName() string { return "PoolsValidationError" }

// Error satisfies the builtin error interface
func (e PoolsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPools.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolsValidationError{}

// Validate checks the field values on Objects with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Objects) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Objects with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObjectsMultiError, or nil if none found.
func (m *Objects) ValidateAll() error {
	return m.validate(true)
}

func (m *Objects) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectCount

	// no validation rules for Size

	if len(errors) > 0 {
		return ObjectsMultiError(errors)
	}

	return nil
}

// ObjectsMultiError is an error wrapping multiple validation errors returned
// by Objects.ValidateAll() if the designated constraints aren't met.
type ObjectsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectsMultiError) AllErrors() []error { return m }

// ObjectsValidationError is the validation error returned by Objects.Validate
// if the designated constraints aren't met.
type ObjectsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsValidationError) ErrorName() string { return "ObjectsValidationError" }

// Error satisfies the builtin error interface
func (e ObjectsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjects.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsValidationError{}

// Validate checks the field values on Usage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Usage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Usage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UsageMultiError, or nil if none found.
func (m *Usage) ValidateAll() error {
	return m.validate(true)
}

func (m *Usage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Used

	// no validation rules for Available

	// no validation rules for Total

	if len(errors) > 0 {
		return UsageMultiError(errors)
	}

	return nil
}

// UsageMultiError is an error wrapping multiple validation errors returned by
// Usage.ValidateAll() if the designated constraints aren't met.
type UsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsageMultiError) AllErrors() []error { return m }

// UsageValidationError is the validation error returned by Usage.Validate if
// the designated constraints aren't met.
type UsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageValidationError) ErrorName() string { return "UsageValidationError" }

// Error satisfies the builtin error interface
func (e UsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Volumes

	if all {
		switch v := interface{}(m.GetPools()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Pools",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Pools",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPools()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Pools",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObjects()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Objects",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Objects",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObjects()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Objects",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Usage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on IOPS with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *IOPS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOPS with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IOPSMultiError, or nil if none found.
func (m *IOPS) ValidateAll() error {
	return m.validate(true)
}

func (m *IOPS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientRead

	// no validation rules for ClientWrite

	// no validation rules for ClientReadOps

	// no validation rules for ClientWriteOps

	if len(errors) > 0 {
		return IOPSMultiError(errors)
	}

	return nil
}

// IOPSMultiError is an error wrapping multiple validation errors returned by
// IOPS.ValidateAll() if the designated constraints aren't met.
type IOPSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOPSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOPSMultiError) AllErrors() []error { return m }

// IOPSValidationError is the validation error returned by IOPS.Validate if the
// designated constraints aren't met.
type IOPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IOPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOPSValidationError) ErrorName() string { return "IOPSValidationError" }

// Error satisfies the builtin error interface
func (e IOPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IOPSValidationError{}

// Validate checks the field values on Crash with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Crash) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Crash with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CrashMultiError, or nil if none found.
func (m *Crash) ValidateAll() error {
	return m.validate(true)
}

func (m *Crash) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if len(errors) > 0 {
		return CrashMultiError(errors)
	}

	return nil
}

// CrashMultiError is an error wrapping multiple validation errors returned by
// Crash.ValidateAll() if the designated constraints aren't met.
type CrashMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrashMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrashMultiError) AllErrors() []error { return m }

// CrashValidationError is the validation error returned by Crash.Validate if
// the designated constraints aren't met.
type CrashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrashValidationError) ErrorName() string { return "CrashValidationError" }

// Error satisfies the builtin error interface
func (e CrashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrashValidationError{}

// Validate checks the field values on ClusterStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterStatsMultiError, or
// nil if none found.
func (m *ClusterStats) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	for idx, item := range m.GetCrashes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterStatsValidationError{
						field:  fmt.Sprintf("Crashes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterStatsValidationError{
						field:  fmt.Sprintf("Crashes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterStatsValidationError{
					field:  fmt.Sprintf("Crashes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetServices()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterStatsValidationError{
					field:  "Services",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterStatsValidationError{
					field:  "Services",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServices()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterStatsValidationError{
				field:  "Services",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterStatsValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterStatsValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterStatsValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Test

	if all {
		switch v := interface{}(m.GetIops()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterStatsValidationError{
					field:  "Iops",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterStatsValidationError{
					field:  "Iops",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIops()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterStatsValidationError{
				field:  "Iops",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterStatsMultiError(errors)
	}

	return nil
}

// ClusterStatsMultiError is an error wrapping multiple validation errors
// returned by ClusterStats.ValidateAll() if the designated constraints aren't met.
type ClusterStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterStatsMultiError) AllErrors() []error { return m }

// ClusterStatsValidationError is the validation error returned by
// ClusterStats.Validate if the designated constraints aren't met.
type ClusterStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterStatsValidationError) ErrorName() string { return "ClusterStatsValidationError" }

// Error satisfies the builtin error interface
func (e ClusterStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterStatsValidationError{}

// Validate checks the field values on ClusterRadar with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterRadar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterRadar with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterRadarMultiError, or
// nil if none found.
func (m *ClusterRadar) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterRadar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterHealth

	// no validation rules for NodesHealth

	// no validation rules for CapacityAvailable

	// no validation rules for Stability

	// no validation rules for Reliability

	if len(errors) > 0 {
		return ClusterRadarMultiError(errors)
	}

	return nil
}

// ClusterRadarMultiError is an error wrapping multiple validation errors
// returned by ClusterRadar.ValidateAll() if the designated constraints aren't met.
type ClusterRadarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterRadarMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterRadarMultiError) AllErrors() []error { return m }

// ClusterRadarValidationError is the validation error returned by
// ClusterRadar.Validate if the designated constraints aren't met.
type ClusterRadarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterRadarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterRadarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterRadarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterRadarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterRadarValidationError) ErrorName() string { return "ClusterRadarValidationError" }

// Error satisfies the builtin error interface
func (e ClusterRadarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterRadar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterRadarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterRadarValidationError{}
