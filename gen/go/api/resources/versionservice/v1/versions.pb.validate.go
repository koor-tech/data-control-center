// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/resources/versionservice/v1/versions.proto

package versionservicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProductVersions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductVersions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductVersionsMultiError, or nil if none found.
func (m *ProductVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ProductVersions_Kube_Pattern.MatchString(m.GetKube()) {
		err := ProductVersionsValidationError{
			field:  "Kube",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProductVersions_KoorOperator_Pattern.MatchString(m.GetKoorOperator()) {
		err := ProductVersionsValidationError{
			field:  "KoorOperator",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProductVersions_Ksd_Pattern.MatchString(m.GetKsd()) {
		err := ProductVersionsValidationError{
			field:  "Ksd",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ProductVersions_Ceph_Pattern.MatchString(m.GetCeph()) {
		err := ProductVersionsValidationError{
			field:  "Ceph",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductVersionsMultiError(errors)
	}

	return nil
}

// ProductVersionsMultiError is an error wrapping multiple validation errors
// returned by ProductVersions.ValidateAll() if the designated constraints
// aren't met.
type ProductVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductVersionsMultiError) AllErrors() []error { return m }

// ProductVersionsValidationError is the validation error returned by
// ProductVersions.Validate if the designated constraints aren't met.
type ProductVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductVersionsValidationError) ErrorName() string { return "ProductVersionsValidationError" }

// Error satisfies the builtin error interface
func (e ProductVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductVersionsValidationError{}

var _ProductVersions_Kube_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

var _ProductVersions_KoorOperator_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

var _ProductVersions_Ksd_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

var _ProductVersions_Ceph_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

// Validate checks the field values on DetailedVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DetailedVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailedVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetailedVersionMultiError, or nil if none found.
func (m *DetailedVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailedVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DetailedVersion_Version_Pattern.MatchString(m.GetVersion()) {
		err := DetailedVersionValidationError{
			field:  "Version",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetImageUri()); err != nil {
		err = DetailedVersionValidationError{
			field:  "ImageUri",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := DetailedVersionValidationError{
			field:  "ImageUri",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ImageHash

	if uri, err := url.Parse(m.GetHelmRepository()); err != nil {
		err = DetailedVersionValidationError{
			field:  "HelmRepository",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := DetailedVersionValidationError{
			field:  "HelmRepository",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for HelmChart

	if len(errors) > 0 {
		return DetailedVersionMultiError(errors)
	}

	return nil
}

// DetailedVersionMultiError is an error wrapping multiple validation errors
// returned by DetailedVersion.ValidateAll() if the designated constraints
// aren't met.
type DetailedVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailedVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailedVersionMultiError) AllErrors() []error { return m }

// DetailedVersionValidationError is the validation error returned by
// DetailedVersion.Validate if the designated constraints aren't met.
type DetailedVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailedVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailedVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailedVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailedVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailedVersionValidationError) ErrorName() string { return "DetailedVersionValidationError" }

// Error satisfies the builtin error interface
func (e DetailedVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailedVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailedVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailedVersionValidationError{}

var _DetailedVersion_Version_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

// Validate checks the field values on DetailedProductVersions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetailedProductVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailedProductVersions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetailedProductVersionsMultiError, or nil if none found.
func (m *DetailedProductVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailedProductVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKoorOperator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetailedProductVersionsValidationError{
					field:  "KoorOperator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetailedProductVersionsValidationError{
					field:  "KoorOperator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKoorOperator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetailedProductVersionsValidationError{
				field:  "KoorOperator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKsd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetailedProductVersionsValidationError{
					field:  "Ksd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetailedProductVersionsValidationError{
					field:  "Ksd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKsd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetailedProductVersionsValidationError{
				field:  "Ksd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCeph()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetailedProductVersionsValidationError{
					field:  "Ceph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetailedProductVersionsValidationError{
					field:  "Ceph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCeph()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetailedProductVersionsValidationError{
				field:  "Ceph",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DetailedProductVersionsMultiError(errors)
	}

	return nil
}

// DetailedProductVersionsMultiError is an error wrapping multiple validation
// errors returned by DetailedProductVersions.ValidateAll() if the designated
// constraints aren't met.
type DetailedProductVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailedProductVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailedProductVersionsMultiError) AllErrors() []error { return m }

// DetailedProductVersionsValidationError is the validation error returned by
// DetailedProductVersions.Validate if the designated constraints aren't met.
type DetailedProductVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailedProductVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailedProductVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailedProductVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailedProductVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailedProductVersionsValidationError) ErrorName() string {
	return "DetailedProductVersionsValidationError"
}

// Error satisfies the builtin error interface
func (e DetailedProductVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailedProductVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailedProductVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailedProductVersionsValidationError{}

// Validate checks the field values on UpgradeOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpgradeOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpgradeOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpgradeOptionsMultiError,
// or nil if none found.
func (m *UpgradeOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *UpgradeOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	// no validation rules for Endpoint

	// no validation rules for Schedule

	if len(errors) > 0 {
		return UpgradeOptionsMultiError(errors)
	}

	return nil
}

// UpgradeOptionsMultiError is an error wrapping multiple validation errors
// returned by UpgradeOptions.ValidateAll() if the designated constraints
// aren't met.
type UpgradeOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpgradeOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpgradeOptionsMultiError) AllErrors() []error { return m }

// UpgradeOptionsValidationError is the validation error returned by
// UpgradeOptions.Validate if the designated constraints aren't met.
type UpgradeOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeOptionsValidationError) ErrorName() string { return "UpgradeOptionsValidationError" }

// Error satisfies the builtin error interface
func (e UpgradeOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeOptionsValidationError{}
