// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: api/resources/koor/v1/koor.proto

package koorv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/koor-tech/data-control-center/gen/go/api/resources/ceph/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The mode of the upgrade
type UpgradeMode int32

const (
	UpgradeMode_UPGRADE_MODE_UNSPECIFIED UpgradeMode = 0
	UpgradeMode_UPGRADE_MODE_DISABLED    UpgradeMode = 1 // Disable upgrades
	UpgradeMode_UPGRADE_MODE_NOTIFY      UpgradeMode = 2 // Notify about new upgrades but do not apply them
	UpgradeMode_UPGRADE_MODE_UPGRADE     UpgradeMode = 3 // Notify about new upgrades and apply them
)

// Enum value maps for UpgradeMode.
var (
	UpgradeMode_name = map[int32]string{
		0: "UPGRADE_MODE_UNSPECIFIED",
		1: "UPGRADE_MODE_DISABLED",
		2: "UPGRADE_MODE_NOTIFY",
		3: "UPGRADE_MODE_UPGRADE",
	}
	UpgradeMode_value = map[string]int32{
		"UPGRADE_MODE_UNSPECIFIED": 0,
		"UPGRADE_MODE_DISABLED":    1,
		"UPGRADE_MODE_NOTIFY":      2,
		"UPGRADE_MODE_UPGRADE":     3,
	}
)

func (x UpgradeMode) Enum() *UpgradeMode {
	p := new(UpgradeMode)
	*p = x
	return p
}

func (x UpgradeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_resources_koor_v1_koor_proto_enumTypes[0].Descriptor()
}

func (UpgradeMode) Type() protoreflect.EnumType {
	return &file_api_resources_koor_v1_koor_proto_enumTypes[0]
}

func (x UpgradeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeMode.Descriptor instead.
func (UpgradeMode) EnumDescriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{0}
}

// Represents a map of products to version strings.
type ProductVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes version, must be a valid semver.
	Kube string `protobuf:"bytes,1,opt,name=kube,proto3" json:"kube,omitempty"`
	// Koor Operator version, must be a valid semver.
	KoorOperator string `protobuf:"bytes,2,opt,name=koor_operator,json=koorOperator,proto3" json:"koor_operator,omitempty"`
	// Koor Storage Distribution version, must be a valid semver.
	Ksd string `protobuf:"bytes,3,opt,name=ksd,proto3" json:"ksd,omitempty"`
	// Ceph version, must be a valid semver.
	Ceph string `protobuf:"bytes,4,opt,name=ceph,proto3" json:"ceph,omitempty"`
}

func (x *ProductVersions) Reset() {
	*x = ProductVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductVersions) ProtoMessage() {}

func (x *ProductVersions) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductVersions.ProtoReflect.Descriptor instead.
func (*ProductVersions) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{0}
}

func (x *ProductVersions) GetKube() string {
	if x != nil {
		return x.Kube
	}
	return ""
}

func (x *ProductVersions) GetKoorOperator() string {
	if x != nil {
		return x.KoorOperator
	}
	return ""
}

func (x *ProductVersions) GetKsd() string {
	if x != nil {
		return x.Ksd
	}
	return ""
}

func (x *ProductVersions) GetCeph() string {
	if x != nil {
		return x.Ceph
	}
	return ""
}

// Defines a detailed version of a product, which includes a container image or a helm chart.
type DetailedVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product version, must be a valid semver.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The URI of the container image.
	ImageUri string `protobuf:"bytes,2,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// The hash of the container image.
	ImageHash string `protobuf:"bytes,3,opt,name=image_hash,json=imageHash,proto3" json:"image_hash,omitempty"`
	// The URI of the helm repository.
	HelmRepository string `protobuf:"bytes,4,opt,name=helm_repository,json=helmRepository,proto3" json:"helm_repository,omitempty"`
	// The name of the helm chart in the repository.
	HelmChart string `protobuf:"bytes,5,opt,name=helm_chart,json=helmChart,proto3" json:"helm_chart,omitempty"`
}

func (x *DetailedVersion) Reset() {
	*x = DetailedVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedVersion) ProtoMessage() {}

func (x *DetailedVersion) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedVersion.ProtoReflect.Descriptor instead.
func (*DetailedVersion) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{1}
}

func (x *DetailedVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DetailedVersion) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *DetailedVersion) GetImageHash() string {
	if x != nil {
		return x.ImageHash
	}
	return ""
}

func (x *DetailedVersion) GetHelmRepository() string {
	if x != nil {
		return x.HelmRepository
	}
	return ""
}

func (x *DetailedVersion) GetHelmChart() string {
	if x != nil {
		return x.HelmChart
	}
	return ""
}

// Represents a map of products to detailed versions, which include images or helm charts.
type DetailedProductVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KoorOperator *DetailedVersion `protobuf:"bytes,1,opt,name=koor_operator,json=koorOperator,proto3" json:"koor_operator,omitempty"` // The detailed Koor Operator version.
	Ksd          *DetailedVersion `protobuf:"bytes,2,opt,name=ksd,proto3" json:"ksd,omitempty"`                                       // The detailed Koor Storage Distribution version.
	Ceph         *DetailedVersion `protobuf:"bytes,3,opt,name=ceph,proto3" json:"ceph,omitempty"`                                     // The detailed Ceph version.
}

func (x *DetailedProductVersions) Reset() {
	*x = DetailedProductVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedProductVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedProductVersions) ProtoMessage() {}

func (x *DetailedProductVersions) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedProductVersions.ProtoReflect.Descriptor instead.
func (*DetailedProductVersions) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{2}
}

func (x *DetailedProductVersions) GetKoorOperator() *DetailedVersion {
	if x != nil {
		return x.KoorOperator
	}
	return nil
}

func (x *DetailedProductVersions) GetKsd() *DetailedVersion {
	if x != nil {
		return x.Ksd
	}
	return nil
}

func (x *DetailedProductVersions) GetCeph() *DetailedVersion {
	if x != nil {
		return x.Ceph
	}
	return nil
}

type ClusterResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes   string `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`     // The number of nodes in the cluster
	Storage string `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"` // Ephemeral Storage available
	Cpu     string `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,omitempty"`         // CPU cores available
	Memory  string `protobuf:"bytes,4,opt,name=memory,proto3" json:"memory,omitempty"`   // Memory available
}

func (x *ClusterResources) Reset() {
	*x = ClusterResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResources) ProtoMessage() {}

func (x *ClusterResources) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResources.ProtoReflect.Descriptor instead.
func (*ClusterResources) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterResources) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *ClusterResources) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *ClusterResources) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ClusterResources) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

// Represents the status of the KoorCluster CRD
type KoorClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalResources        *ClusterResources        `protobuf:"bytes,1,opt,name=total_resources,json=totalResources,proto3" json:"total_resources,omitempty"`                         // The total resources available in the cluster nodes
	MeetsMinimumResources bool                     `protobuf:"varint,2,opt,name=meets_minimum_resources,json=meetsMinimumResources,proto3" json:"meets_minimum_resources,omitempty"` // Does the cluster meet the minimum recommended resources
	CurrentVersions       *ProductVersions         `protobuf:"bytes,3,opt,name=current_versions,json=currentVersions,proto3" json:"current_versions,omitempty"`                      // The current versions of rook and ceph
	LatestVersions        *DetailedProductVersions `protobuf:"bytes,4,opt,name=latest_versions,json=latestVersions,proto3" json:"latest_versions,omitempty"`                         // The latest versions of rook and ceph
}

func (x *KoorClusterStatus) Reset() {
	*x = KoorClusterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KoorClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KoorClusterStatus) ProtoMessage() {}

func (x *KoorClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KoorClusterStatus.ProtoReflect.Descriptor instead.
func (*KoorClusterStatus) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{4}
}

func (x *KoorClusterStatus) GetTotalResources() *ClusterResources {
	if x != nil {
		return x.TotalResources
	}
	return nil
}

func (x *KoorClusterStatus) GetMeetsMinimumResources() bool {
	if x != nil {
		return x.MeetsMinimumResources
	}
	return false
}

func (x *KoorClusterStatus) GetCurrentVersions() *ProductVersions {
	if x != nil {
		return x.CurrentVersions
	}
	return nil
}

func (x *KoorClusterStatus) GetLatestVersions() *DetailedProductVersions {
	if x != nil {
		return x.LatestVersions
	}
	return nil
}

type UpgradeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode     UpgradeMode `protobuf:"varint,1,opt,name=mode,proto3,enum=api.resources.koor.v1.UpgradeMode" json:"mode,omitempty"` // Upgrade mode
	Endpoint string      `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                                 // The api endpoint used to find the ceph latest version
	// The schedule to check for new versions. Uses CRON format as specified by https://github.com/robfig/cron/tree/v3.
	// Defaults to everyday at midnight in the local timezone.
	// To change the timezone, prefix the schedule with CRON_TZ=<Timezone>.
	// For example: "CRON_TZ=UTC 0 0 * * *" is midnight UTC.
	Schedule string `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *UpgradeOptions) Reset() {
	*x = UpgradeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeOptions) ProtoMessage() {}

func (x *UpgradeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeOptions.ProtoReflect.Descriptor instead.
func (*UpgradeOptions) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{5}
}

func (x *UpgradeOptions) GetMode() UpgradeMode {
	if x != nil {
		return x.Mode
	}
	return UpgradeMode_UPGRADE_MODE_UNSPECIFIED
}

func (x *UpgradeOptions) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *UpgradeOptions) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

// Represents the state of KoorCluster
type KoorClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseAllDevices         *wrapperspb.BoolValue    `protobuf:"bytes,1,opt,name=use_all_devices,json=useAllDevices,proto3" json:"use_all_devices,omitempty"`                           // Use all devices on nodes
	MonitoringEnabled     *wrapperspb.BoolValue    `protobuf:"bytes,2,opt,name=monitoring_enabled,json=monitoringEnabled,proto3" json:"monitoring_enabled,omitempty"`                 // Enable monitoring. Requires Prometheus to be pre-installed.
	DashboardEnabled      *wrapperspb.BoolValue    `protobuf:"bytes,3,opt,name=dashboard_enabled,json=dashboardEnabled,proto3" json:"dashboard_enabled,omitempty"`                    // Enable the ceph dashboard for viewing cluster status
	ToolboxEnabled        *wrapperspb.BoolValue    `protobuf:"bytes,4,opt,name=toolbox_enabled,json=toolboxEnabled,proto3" json:"toolbox_enabled,omitempty"`                          // Installs a debugging toolbox deployment
	UpgradeOptions        *UpgradeOptions          `protobuf:"bytes,5,opt,name=upgrade_options,json=upgradeOptions,proto3" json:"upgrade_options,omitempty"`                          // Specifies the upgrade options for new ceph versions
	KsdReleaseName        string                   `protobuf:"bytes,6,opt,name=ksd_release_name,json=ksdReleaseName,proto3" json:"ksd_release_name,omitempty"`                        // The name to use for KSD helm release.
	KsdClusterReleaseName string                   `protobuf:"bytes,7,opt,name=ksd_cluster_release_name,json=ksdClusterReleaseName,proto3" json:"ksd_cluster_release_name,omitempty"` // The name to use for KSD cluster helm release.
	OsdScrubbingSchedule  *v1.OSDScrubbingSchedule `protobuf:"bytes,8,opt,name=osd_scrubbing_schedule,json=osdScrubbingSchedule,proto3" json:"osd_scrubbing_schedule,omitempty"`      // OSD scrubbing schedule config
}

func (x *KoorClusterSpec) Reset() {
	*x = KoorClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KoorClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KoorClusterSpec) ProtoMessage() {}

func (x *KoorClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KoorClusterSpec.ProtoReflect.Descriptor instead.
func (*KoorClusterSpec) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{6}
}

func (x *KoorClusterSpec) GetUseAllDevices() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseAllDevices
	}
	return nil
}

func (x *KoorClusterSpec) GetMonitoringEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.MonitoringEnabled
	}
	return nil
}

func (x *KoorClusterSpec) GetDashboardEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.DashboardEnabled
	}
	return nil
}

func (x *KoorClusterSpec) GetToolboxEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ToolboxEnabled
	}
	return nil
}

func (x *KoorClusterSpec) GetUpgradeOptions() *UpgradeOptions {
	if x != nil {
		return x.UpgradeOptions
	}
	return nil
}

func (x *KoorClusterSpec) GetKsdReleaseName() string {
	if x != nil {
		return x.KsdReleaseName
	}
	return ""
}

func (x *KoorClusterSpec) GetKsdClusterReleaseName() string {
	if x != nil {
		return x.KsdClusterReleaseName
	}
	return ""
}

func (x *KoorClusterSpec) GetOsdScrubbingSchedule() *v1.OSDScrubbingSchedule {
	if x != nil {
		return x.OsdScrubbingSchedule
	}
	return nil
}

type KoorCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string             `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Spec      *KoorClusterSpec   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status    *KoorClusterStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KoorCluster) Reset() {
	*x = KoorCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_resources_koor_v1_koor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KoorCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KoorCluster) ProtoMessage() {}

func (x *KoorCluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_resources_koor_v1_koor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KoorCluster.ProtoReflect.Descriptor instead.
func (*KoorCluster) Descriptor() ([]byte, []int) {
	return file_api_resources_koor_v1_koor_proto_rawDescGZIP(), []int{7}
}

func (x *KoorCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KoorCluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KoorCluster) GetSpec() *KoorClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *KoorCluster) GetStatus() *KoorClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_api_resources_koor_v1_koor_proto protoreflect.FileDescriptor

var file_api_resources_koor_v1_koor_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x6b, 0x6f, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x6f, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x70, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x75,
	0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x32,
	0x1f, 0x5e, 0x76, 0x3f, 0x5c, 0x64, 0x2b, 0x28, 0x3f, 0x3a, 0x5c, 0x2e, 0x5c, 0x64, 0x2b, 0x29,
	0x7b, 0x30, 0x2c, 0x32, 0x7d, 0x28, 0x3f, 0x3a, 0x5c, 0x2d, 0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x24,
	0x52, 0x04, 0x6b, 0x75, 0x62, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6b, 0x6f, 0x6f, 0x72, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa,
	0x42, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x76, 0x3f, 0x5c, 0x64, 0x2b, 0x28, 0x3f, 0x3a, 0x5c,
	0x2e, 0x5c, 0x64, 0x2b, 0x29, 0x7b, 0x30, 0x2c, 0x32, 0x7d, 0x28, 0x3f, 0x3a, 0x5c, 0x2d, 0x5c,
	0x64, 0x2b, 0x29, 0x3f, 0x24, 0x52, 0x0c, 0x6b, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x6b, 0x73, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x76, 0x3f, 0x5c, 0x64, 0x2b, 0x28,
	0x3f, 0x3a, 0x5c, 0x2e, 0x5c, 0x64, 0x2b, 0x29, 0x7b, 0x30, 0x2c, 0x32, 0x7d, 0x28, 0x3f, 0x3a,
	0x5c, 0x2d, 0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x24, 0x52, 0x03, 0x6b, 0x73, 0x64, 0x12, 0x3a, 0x0a,
	0x04, 0x63, 0x65, 0x70, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23,
	0x72, 0x21, 0x32, 0x1f, 0x5e, 0x76, 0x3f, 0x5c, 0x64, 0x2b, 0x28, 0x3f, 0x3a, 0x5c, 0x2e, 0x5c,
	0x64, 0x2b, 0x29, 0x7b, 0x30, 0x2c, 0x32, 0x7d, 0x28, 0x3f, 0x3a, 0x5c, 0x2d, 0x5c, 0x64, 0x2b,
	0x29, 0x3f, 0x24, 0x52, 0x04, 0x63, 0x65, 0x70, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0xfa, 0x42, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x76, 0x3f, 0x5c, 0x64, 0x2b, 0x28, 0x3f, 0x3a,
	0x5c, 0x2e, 0x5c, 0x64, 0x2b, 0x29, 0x7b, 0x30, 0x2c, 0x32, 0x7d, 0x28, 0x3f, 0x3a, 0x5c, 0x2d,
	0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x0f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0e, 0x68, 0x65, 0x6c, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x6d,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65,
	0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x6b, 0x6f, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6b, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x03, 0x6b, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6b, 0x73, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x65,
	0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x63, 0x65, 0x70, 0x68, 0x22, 0x6c, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x22, 0xc9, 0x02, 0x0a, 0x11, 0x4b, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x6d, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6d,
	0x65, 0x65, 0x74, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b,
	0x6f, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0xc4, 0x04, 0x0a, 0x0f, 0x4b, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x43, 0x0a, 0x0f, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x78, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x73, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6b, 0x73, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x6b, 0x73, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6b, 0x73, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x6f, 0x73, 0x64, 0x5f, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x53, 0x44, 0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x14, 0x6f, 0x73, 0x64, 0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x4b,
	0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x79, 0x0a, 0x0b, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x47, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x10, 0x03, 0x42, 0xeb, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x42, 0x09, 0x4b, 0x6f, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x6f,
	0x72, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x6b, 0x6f, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x6f, 0x6f, 0x72, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x41, 0x52, 0x4b, 0xaa, 0x02, 0x15, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x6f, 0x6f, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x41,
	0x70, 0x69, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5c, 0x4b, 0x6f, 0x6f,
	0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x41, 0x70, 0x69, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x5c, 0x4b, 0x6f, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x41, 0x70, 0x69, 0x3a, 0x3a,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x4b, 0x6f, 0x6f, 0x72, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_resources_koor_v1_koor_proto_rawDescOnce sync.Once
	file_api_resources_koor_v1_koor_proto_rawDescData = file_api_resources_koor_v1_koor_proto_rawDesc
)

func file_api_resources_koor_v1_koor_proto_rawDescGZIP() []byte {
	file_api_resources_koor_v1_koor_proto_rawDescOnce.Do(func() {
		file_api_resources_koor_v1_koor_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_resources_koor_v1_koor_proto_rawDescData)
	})
	return file_api_resources_koor_v1_koor_proto_rawDescData
}

var file_api_resources_koor_v1_koor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_resources_koor_v1_koor_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_resources_koor_v1_koor_proto_goTypes = []interface{}{
	(UpgradeMode)(0),                // 0: api.resources.koor.v1.UpgradeMode
	(*ProductVersions)(nil),         // 1: api.resources.koor.v1.ProductVersions
	(*DetailedVersion)(nil),         // 2: api.resources.koor.v1.DetailedVersion
	(*DetailedProductVersions)(nil), // 3: api.resources.koor.v1.DetailedProductVersions
	(*ClusterResources)(nil),        // 4: api.resources.koor.v1.ClusterResources
	(*KoorClusterStatus)(nil),       // 5: api.resources.koor.v1.KoorClusterStatus
	(*UpgradeOptions)(nil),          // 6: api.resources.koor.v1.UpgradeOptions
	(*KoorClusterSpec)(nil),         // 7: api.resources.koor.v1.KoorClusterSpec
	(*KoorCluster)(nil),             // 8: api.resources.koor.v1.KoorCluster
	(*wrapperspb.BoolValue)(nil),    // 9: google.protobuf.BoolValue
	(*v1.OSDScrubbingSchedule)(nil), // 10: api.resources.ceph.v1.OSDScrubbingSchedule
}
var file_api_resources_koor_v1_koor_proto_depIdxs = []int32{
	2,  // 0: api.resources.koor.v1.DetailedProductVersions.koor_operator:type_name -> api.resources.koor.v1.DetailedVersion
	2,  // 1: api.resources.koor.v1.DetailedProductVersions.ksd:type_name -> api.resources.koor.v1.DetailedVersion
	2,  // 2: api.resources.koor.v1.DetailedProductVersions.ceph:type_name -> api.resources.koor.v1.DetailedVersion
	4,  // 3: api.resources.koor.v1.KoorClusterStatus.total_resources:type_name -> api.resources.koor.v1.ClusterResources
	1,  // 4: api.resources.koor.v1.KoorClusterStatus.current_versions:type_name -> api.resources.koor.v1.ProductVersions
	3,  // 5: api.resources.koor.v1.KoorClusterStatus.latest_versions:type_name -> api.resources.koor.v1.DetailedProductVersions
	0,  // 6: api.resources.koor.v1.UpgradeOptions.mode:type_name -> api.resources.koor.v1.UpgradeMode
	9,  // 7: api.resources.koor.v1.KoorClusterSpec.use_all_devices:type_name -> google.protobuf.BoolValue
	9,  // 8: api.resources.koor.v1.KoorClusterSpec.monitoring_enabled:type_name -> google.protobuf.BoolValue
	9,  // 9: api.resources.koor.v1.KoorClusterSpec.dashboard_enabled:type_name -> google.protobuf.BoolValue
	9,  // 10: api.resources.koor.v1.KoorClusterSpec.toolbox_enabled:type_name -> google.protobuf.BoolValue
	6,  // 11: api.resources.koor.v1.KoorClusterSpec.upgrade_options:type_name -> api.resources.koor.v1.UpgradeOptions
	10, // 12: api.resources.koor.v1.KoorClusterSpec.osd_scrubbing_schedule:type_name -> api.resources.ceph.v1.OSDScrubbingSchedule
	7,  // 13: api.resources.koor.v1.KoorCluster.spec:type_name -> api.resources.koor.v1.KoorClusterSpec
	5,  // 14: api.resources.koor.v1.KoorCluster.status:type_name -> api.resources.koor.v1.KoorClusterStatus
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_resources_koor_v1_koor_proto_init() }
func file_api_resources_koor_v1_koor_proto_init() {
	if File_api_resources_koor_v1_koor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_resources_koor_v1_koor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_resources_koor_v1_koor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_resources_koor_v1_koor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedProductVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_resources_koor_v1_koor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_resources_koor_v1_koor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KoorClusterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_resources_koor_v1_koor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_resources_koor_v1_koor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KoorClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_resources_koor_v1_koor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KoorCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_resources_koor_v1_koor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_resources_koor_v1_koor_proto_goTypes,
		DependencyIndexes: file_api_resources_koor_v1_koor_proto_depIdxs,
		EnumInfos:         file_api_resources_koor_v1_koor_proto_enumTypes,
		MessageInfos:      file_api_resources_koor_v1_koor_proto_msgTypes,
	}.Build()
	File_api_resources_koor_v1_koor_proto = out.File
	file_api_resources_koor_v1_koor_proto_rawDesc = nil
	file_api_resources_koor_v1_koor_proto_goTypes = nil
	file_api_resources_koor_v1_koor_proto_depIdxs = nil
}
