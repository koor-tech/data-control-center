// @generated by protoc-gen-es v1.7.2
// @generated from file api/resources/versionservice/v1/versions.proto (package api.resources.versionservice.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The mode of the upgrade
 *
 * @generated from enum api.resources.versionservice.v1.UpgradeMode
 */
export declare enum UpgradeMode {
  /**
   * @generated from enum value: UPGRADE_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Disable upgrades
   *
   * @generated from enum value: UPGRADE_MODE_DISABLED = 1;
   */
  DISABLED = 1,

  /**
   * Notify about new upgrades but do not apply them
   *
   * @generated from enum value: UPGRADE_MODE_NOTIFY = 2;
   */
  NOTIFY = 2,

  /**
   * Notify about new upgrades and apply them
   *
   * @generated from enum value: UPGRADE_MODE_UPGRADE = 3;
   */
  UPGRADE = 3,
}

/**
 * Represents a map of products to version strings.
 *
 * @generated from message api.resources.versionservice.v1.ProductVersions
 */
export declare class ProductVersions extends Message<ProductVersions> {
  /**
   * Kubernetes version, must be a valid semver.
   *
   * @generated from field: string kube = 1;
   */
  kube: string;

  /**
   * Koor Operator version, must be a valid semver.
   *
   * @generated from field: string koor_operator = 2;
   */
  koorOperator: string;

  /**
   * Koor Storage Distribution version, must be a valid semver.
   *
   * @generated from field: string ksd = 3;
   */
  ksd: string;

  /**
   * Ceph version, must be a valid semver.
   *
   * @generated from field: string ceph = 4;
   */
  ceph: string;

  constructor(data?: PartialMessage<ProductVersions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.resources.versionservice.v1.ProductVersions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductVersions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductVersions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductVersions;

  static equals(a: ProductVersions | PlainMessage<ProductVersions> | undefined, b: ProductVersions | PlainMessage<ProductVersions> | undefined): boolean;
}

/**
 * Defines a detailed version of a product, which includes a container image or a helm chart.
 *
 * @generated from message api.resources.versionservice.v1.DetailedVersion
 */
export declare class DetailedVersion extends Message<DetailedVersion> {
  /**
   * The product version, must be a valid semver.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The URI of the container image.
   *
   * @generated from field: string image_uri = 2;
   */
  imageUri: string;

  /**
   * The hash of the container image.
   *
   * @generated from field: string image_hash = 3;
   */
  imageHash: string;

  /**
   * The URI of the helm repository.
   *
   * @generated from field: string helm_repository = 4;
   */
  helmRepository: string;

  /**
   * The name of the helm chart in the repository.
   *
   * @generated from field: string helm_chart = 5;
   */
  helmChart: string;

  constructor(data?: PartialMessage<DetailedVersion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.resources.versionservice.v1.DetailedVersion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DetailedVersion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DetailedVersion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DetailedVersion;

  static equals(a: DetailedVersion | PlainMessage<DetailedVersion> | undefined, b: DetailedVersion | PlainMessage<DetailedVersion> | undefined): boolean;
}

/**
 * Represents a map of products to detailed versions, which include images or helm charts.
 *
 * @generated from message api.resources.versionservice.v1.DetailedProductVersions
 */
export declare class DetailedProductVersions extends Message<DetailedProductVersions> {
  /**
   * The detailed Koor Operator version.
   *
   * @generated from field: api.resources.versionservice.v1.DetailedVersion koor_operator = 1;
   */
  koorOperator?: DetailedVersion;

  /**
   * The detailed Koor Storage Distribution version.
   *
   * @generated from field: api.resources.versionservice.v1.DetailedVersion ksd = 2;
   */
  ksd?: DetailedVersion;

  /**
   * The detailed Ceph version.
   *
   * @generated from field: api.resources.versionservice.v1.DetailedVersion ceph = 3;
   */
  ceph?: DetailedVersion;

  constructor(data?: PartialMessage<DetailedProductVersions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.resources.versionservice.v1.DetailedProductVersions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DetailedProductVersions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DetailedProductVersions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DetailedProductVersions;

  static equals(a: DetailedProductVersions | PlainMessage<DetailedProductVersions> | undefined, b: DetailedProductVersions | PlainMessage<DetailedProductVersions> | undefined): boolean;
}

/**
 * @generated from message api.resources.versionservice.v1.UpgradeOptions
 */
export declare class UpgradeOptions extends Message<UpgradeOptions> {
  /**
   * Upgrade mode
   *
   * @generated from field: api.resources.versionservice.v1.UpgradeMode mode = 1;
   */
  mode: UpgradeMode;

  /**
   * The api endpoint used to find the ceph latest version
   *
   * @generated from field: string endpoint = 2;
   */
  endpoint: string;

  /**
   *
   * The schedule to check for new versions. Uses CRON format as specified by https://github.com/robfig/cron/tree/v3.
   * Defaults to everyday at midnight in the local timezone.
   * To change the timezone, prefix the schedule with CRON_TZ=<Timezone>.
   * For example: "CRON_TZ=UTC 0 0 * * *" is midnight UTC.
   *
   * @generated from field: string schedule = 3;
   */
  schedule: string;

  constructor(data?: PartialMessage<UpgradeOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "api.resources.versionservice.v1.UpgradeOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeOptions;

  static equals(a: UpgradeOptions | PlainMessage<UpgradeOptions> | undefined, b: UpgradeOptions | PlainMessage<UpgradeOptions> | undefined): boolean;
}

